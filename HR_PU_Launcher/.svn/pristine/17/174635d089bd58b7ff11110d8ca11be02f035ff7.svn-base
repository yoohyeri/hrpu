package com.mobilusauto.app.productionprocess;

import java.io.*;
import java.text.*;
import java.util.*;
import java.lang.Process;

import android.os.*;
import android.util.Log;

/**
 * @project	: usb
 * @package : co.kr.hitecms.usb.debug
 * @name	: DEBUG__.java
 * @author	: ThinkCodeHelp
 * @date	: 2015. 3. 31.
 * @description	: 
 */
public class DEBUG_ {
	/**
	 * @author	: ThinkCodeHelp
	 * @date	: 2015. 3. 31.
	 * @description	: 湲곕?�� ??��?��?��??��?��?��??��?��?��
	 **/
	public DEBUG_() {
	}
	
	/** The Constant ERROR_. */
	public static final int ERROR_ = -1;
	
	/**
	 * Yes
	 */
	public static final String STR_YES			= "1";
	
	/**
	 * No
	 */
	public static final String STR_NO			= "0";
	
	public static final int CAMERA_AV 			= 0;
	public static final int CAMERA_HDMI 		= 1;
	public static final int CAMERA_DVD 			= 2;
	
	
	/**
	 * Initializer
	 */
	public static final int INIT_ = 0;
	
	/**
	 * Debug Tag
	 */
	public static final String _DEBUG = "debug";
	
	/**
	 * Debug Mode
	 */
	public final static boolean isDebugMode =
//										true;
										false;
	
	/**
	 * Decoration String
	 */
	private static final String _DECO_STR = "=====> ";
	
	/**
	 * @name : debug
	 * @author : ThinkCode
	 * @description : Debug
	 * @param _msg
	 */
	public static void debug(String _msg) {
		if(isDebugMode)
			Log.d(_DEBUG, _DECO_STR + _msg);
	}
	
	public static void adebug(String _msg) {
		Log.d(_DEBUG, _DECO_STR + _msg);
	}
	
	/**
	 * @name : error
	 * @author : ThinkCode
	 * @description : Error
	 * @param _msg
	 */
	public static void error(String _msg) {
		if(isDebugMode)
			Log.e(_DEBUG, _DECO_STR + _msg);
	}
	
	
	//------------------File Log
	//------------Log Save
	/**
	 * ??��??�� 硫붾?��?��?�뿉 Log file ?�???�??
	 *
	 * MTP�??? PC?�?? ??��??�� ??�� Android USB?�?? 踰꾧?�� ??��??��..
	 *   - ?�????�� ??��?��???�� ?�??�??? ??��?�?? PC ?�???�?? ??��??�� 硫붾?��?��?�뿉 ?�???�???�?? ?�????��??��?��?�굹 ??��??��??�� 蹂댁?���??? ?�????��
	 *   - ??��??�� 硫붾?��?��?�뿉 濡쒓?���??? ??��??�??? ?�???뿬�?�뚮?���??? ??��??��?�????���???..
	 *     1. ?�????�� ??��?��???�� ?�??嫄곕�??
	 *     2. adb shell ??�� ??��??��?�???�?? ??��??��?�??嫄곕�??
	 *    
	 * http://stackoverflow.com/questions/13737261/nexus-4-not-showing-files-via-mtp/14074407#14074407
	 *
	 */
	
	public static String mNandDir =  Environment.getExternalStorageDirectory()+File.separator+"Log";
//		public static String mUSBDir =  "/storage/usb0/MyDir";
//	private static String mUSBDir = "/storage/usb0";
	private static String mUSBDir = "/storage/sdcard1";
	
	
	private static String _content = "";
	
	public static String getTestFileName() {
		return "log_"+_content+".txt";
	}

	public static String createTestFile() {
		String _ret = "";
		int BUFFER_SIZE = 256;
		SimpleDateFormat sdfilename = new SimpleDateFormat("yyyyMMddHHmmss"); 	// ?룷留�???�??? ( ?????��??�� ??��?��꾩큹)
			
			String today = null;
			Calendar cal = Calendar.getInstance();
 
			SimpleDateFormat sdformat = new SimpleDateFormat("MM-dd HH:mm:ss"); 	// ?룷留�???�??? ( ?????��??�� ??��?��꾩큹)
		today = sdformat.format(cal.getTime());
		 
		File mLogFile = null;
		FileOutputStream fos;
        File folder = new File(mUSBDir);

        _content = sdfilename.format(cal.getTime());
        	mLogFile = makeFile(mUSBDir + "/" + "log_"+_content+".txt");

        	Process logcatProc = null;
			try {
				logcatProc = Runtime.getRuntime().exec("logcat -v time");
			} catch (IOException e) {
				e.printStackTrace();
				return _ret;
			}
			 
			BufferedReader reader = null;
			String lineSeparatoer = System.getProperty("line.separator");
			StringBuilder strOutput = new StringBuilder();
			try {
    			String line;
    			String _data;
    			
    			fos = new FileOutputStream(mLogFile);
    			
    			try {
                    fos.write(_content.getBytes());
                    fos.flush();
                    fos.getFD().sync();
                    fos.close();
                    _ret = _content;
                } catch (IOException e) {
                    e.printStackTrace();
                }

//                fos.getFD().sync();
    			
			} catch (IOException e) {
				e.printStackTrace();
			}
	    return _ret;
	}
	
	static public String readFile(){
		File file = null;
		file = makeFile(mUSBDir + "/" + "log_"+_content+".txt");
		
        int readcount=0;
        if(file!=null&&file.exists()){
            try {
                FileInputStream fis = new FileInputStream(file);
                readcount = (int)file.length();
                byte[] buffer = new byte[readcount];
                fis.read(buffer);
                for(int i=0 ; i<file.length();i++){
                    Log.d(TAG, ""+buffer[i]);
                }
                fis.close();
                return new String(buffer);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return "";
    }

	public static boolean DeleteTestFile() {
		File file = null;
		file = makeFile(mUSBDir + "/" + "log_"+_content+".txt");
		
        boolean result;
        if(file!=null&&file.exists()){
            file.delete();
            result = true;
        }else{
            result = false;
        }
        return result;
	}
	
	public static boolean DeleteFile(String path) {
		Log.d("debug", "=>> path : " + path);
		File file = null;
		file = makeFile(path);
		
        boolean result;
        if(file!=null&&file.exists()){
            file.delete();
            result = true;
        }else{
            result = false;
        }
        return result;
	}

	
	private static final String TAG = "TestFileActivity";
	/**
     * ?�????��??��?��? ?�???�??
     * @return dir
     */
	private static File makeDirectory(String dir_path){
        File dir = new File(dir_path);
        if (!dir.exists())
        {
            dir.mkdirs();
            Log.i( TAG , "!dir.exists" );
        }else{
            Log.i( TAG , "dir.exists" );
        }
 
        return dir;
    }
 
    /**
     * ??��??�� ?�???�??
     * @param dir
     * @return file
     */
	private static File makeFile(String file_path){
        File file = null;
        boolean isSuccess = false;
            file = new File(file_path);
            if(file!=null&&!file.exists()){
                Log.i( TAG , "!file.exists" );
                try {
                    isSuccess = file.createNewFile();
                } catch (IOException e) {
                    e.printStackTrace();
                } finally{
                    Log.i(TAG, "??��??��?�???�?? ?뿬遺? = " + isSuccess);
                }
            }else{
                Log.i( TAG , "file.exists" );
            }
        return file;
    }
	private static File makeFile(File dir , String file_path){
        File file = null;
        boolean isSuccess = false;
        if(dir.isDirectory()){
            file = new File(file_path);
            if(file!=null&&!file.exists()){
                Log.i( TAG , "!file.exists" );
                try {
                    isSuccess = file.createNewFile();
                } catch (IOException e) {
                    e.printStackTrace();
                } finally{
                    Log.i(TAG, "�뙆�씪�깮�꽦 �뿬?���?? = " + isSuccess);
                }
            }else{
                Log.i( TAG , "file.exists" );
            }
        }
        return file;
    }
 
    /**
     * ?�????��??��?��? ?뿬遺? 泥댄�?? ?�??�???
     * @param dir
     * @return
     */
	public static boolean isDirectory(File dir){
        boolean result;
        if(dir!=null&&dir.isDirectory()){
            result=true;
        }else{
            result=false;
        }
        return result;
    }
	
	public static boolean isFile(String FileName) {
		boolean _flag = false;

		String path=mUSBDir+"/"+FileName;
		File files = new File(path);
		if(files.exists()==true) _flag = true;
		
		return _flag;
	}
	
	public static boolean isFileFullPath(String FullPath) {
		boolean _flag = false;
		
		File files = new File(FullPath);
		if(files.exists()==true) _flag = true;
		
		return _flag;
	}
	
	//-------CreateTestReport
	public static boolean createTestReport(String _folder, String _file, String[] _key, String[] _value) {
		boolean _ret = false;
		
		String __Folder, __File;
		if(_folder == null || _folder.length() <= 0)	__Folder = mUSBDir;
		else											__Folder = mUSBDir + "/" + _folder;
		if(_file == null || _file.length() <= 0)		__File = "default";
		else											__File = _file;
		
		File mWriteFile = null;
		FileOutputStream fos;
        File folder = new File(__Folder);
        if (folder.mkdir() || folder.isDirectory()) {
        	File dir = makeDirectory(__Folder);
        	mWriteFile = makeFile(dir, __Folder + "/" + __File);
        	
        	//file delete
        	if(mWriteFile!=null&&mWriteFile.exists())	mWriteFile.delete();

        	//new file write
        	String lineSeparatoer = "\r\n";
			StringBuilder strOutput = new StringBuilder();
			try {
    			String line;
    			String _data; 
    			fos = new FileOutputStream(mWriteFile);
    			String __writeData;
    			for(int __i = 0; __i <_key.length; __i ++) {
    				_ret = true;
    				if(__i == 12 || __i == 13)
    					__writeData = _key[__i] + " : " + _value[__i];
    				else
    					__writeData = _key[__i] + "," + _value[__i];
    				
    				fos.write(__writeData.getBytes());
                    fos.write(lineSeparatoer.getBytes());
                    if(__i == 1)	fos.write(lineSeparatoer.getBytes());
    			}
                fos.flush();
                fos.getFD().sync();
    			fos.close();
			} catch (IOException e) {
				e.printStackTrace();
				Log.d("debug", "==========> err : " + e.toString());
			}
        }
	    return _ret;
	}
	
	//-------CreateCasFile
	public static void createCasFile(String _folder, String _file, byte _value[]) {
		boolean _ret = false;
		
		String __Folder, __File;
		if(_folder == null || _folder.length() <= 0)	__Folder = "/data";
		else											__Folder = mUSBDir + "/" + _folder;
		if(_file == null || _file.length() <= 0)		__File = "default";
		else											__File = _file;
		
		File mWriteFile = null;
		FileOutputStream fos;
        File folder = new File(__Folder);
        if (folder.mkdir() || folder.isDirectory()) {
        	File dir = makeDirectory(__Folder);
        	mWriteFile = makeFile(dir, __File);
        	//file delete
        	if(mWriteFile!=null&&mWriteFile.exists())	mWriteFile.delete();
        	//new file write
        	String lineSeparatoer = "\r\n";
			StringBuilder strOutput = new StringBuilder();
			try {
    			String line;
    			String _data; 
    			fos = new FileOutputStream(mWriteFile);
    			
    			fos.write(_value);
    			fos.flush();
                fos.getFD().sync();
     			fos.close();
			} catch (IOException e) {
				e.printStackTrace();
				Log.d("debug", "==========> err : " + e.toString());
			}
        }
	}
	
	static byte[] byteArrayToHex(byte[] a) {
		StringBuilder sb = new StringBuilder();
	    for(final byte b: a)
	        sb.append(String.format("%02x", b&0xff));
	    return (sb.toString()).getBytes();
	}
	
	static byte[] byteArrayToHexUpperCase(byte[] a) {
		StringBuilder sb = new StringBuilder();
	    for(final byte b: a)
	        sb.append(String.format("%02x", b&0xff));
	    
	    return ((sb.toString()).toUpperCase()).getBytes();
	}
	
	public static void toHexString(String _tag, byte buf[]){
//      StringBuffer sb = new StringBuffer();
//      for (int i = 0; i < buf.length; i++) {
//          sb.append(Integer.toHexString(0x0100 + (buf[i] & 0x00FF)).substring(1));
//          sb.append(" ");
//      }
//      Log.d("debug", "=>> [3] " + _tag + " : "+ sb.toString());
  }
	
	public static int mGetNumber(File file, int _default) {
		int ret = _default;
//		if(folder.isDirectory()) {
			if(file.isFile()) {
				try{
		            FileReader filereader = new FileReader(file);
		            //입력 버퍼 생성
		            BufferedReader bufReader = new BufferedReader(filereader);
		            String line = "";
		            while((line = bufReader.readLine()) != null){
		            	ret = Integer.parseInt(line);
		                break;
		            }
		            //.readLine()은 끝에 개행문자를 읽지 않는다.            
		            bufReader.close();
		        }catch (FileNotFoundException e) {
		            // TODO: handle exception
		        }catch(IOException e){
		            System.out.println(e);
		        }
			} else {
				File folder = new File("/storage/sdcard1/TestReport");
		        if (folder.mkdir() || folder.isDirectory()) {}
		        else { ret = -1;}
			}
//		}
		
		return ret;
	}
	
	public static String mGetString(File file, int _default) {
		String ret = "";
			if(file.isFile()) {
				try{
		            FileReader filereader = new FileReader(file);
		            //입력 버퍼 생성
		            BufferedReader bufReader = new BufferedReader(filereader);
		            String line = "";
		            while((line = bufReader.readLine()) != null){
//		            	ret = Integer.parseInt(line);
		            	return line;
//		                break;
		            }
		            //.readLine()은 끝에 개행문자를 읽지 않는다.            
		            bufReader.close();
		        }catch (FileNotFoundException e) {
		            // TODO: handle exception
		        }catch(IOException e){
		            System.out.println(e);
		        }
			} 
		
		return ret;
	}
	
	public static String mGetString(String _path) {
		String ret = "";
		File file = new File(_path);
		if(file.isFile()) {
			try{
	            FileReader filereader = new FileReader(file);
	            //입력 버퍼 생성
	            BufferedReader bufReader = new BufferedReader(filereader);
	            String line = "";
	            while((line = bufReader.readLine()) != null){
//		            	ret = Integer.parseInt(line);
	            	return line;
	            }
	            //.readLine()은 끝에 개행문자를 읽지 않는다.            
	            bufReader.close();
	        }catch (FileNotFoundException e) {
	            // TODO: handle exception
	        }catch(IOException e){
	            System.out.println(e);
	        }
		} 
		
		return ret;
	}
	
	
	public static boolean mSaveNumber(File file, int _default) {
//		boolean ret = false;
//		try {
//		   FileWriter fw = new FileWriter(file);
//		   fw.write(Integer.toString(_default));
//		   fw.close();
//		   ret = true;
//		} catch (IOException e) {
//		   e.printStackTrace();
//		}
//		return ret;
		boolean ret = false;
		File folder = new File("/storage/sdcard1/TestReport");
        if (folder.mkdir() || folder.isDirectory()) {
        	File dir = makeDirectory("/storage/sdcard1/TestReport");
			try {
				FileOutputStream fos = new FileOutputStream(file);
				fos.write((Integer.toString(_default)).getBytes());
				fos.flush();
	            fos.getFD().sync();
				fos.close();
			} catch (IOException e) {
			   e.printStackTrace();
			}
        }
		return ret;
	}
	
	public static String mSaveFile(String _folder, String _file, String _txt) {
		File folder = new File(_folder);
		File file;
        if (folder.mkdir() || folder.isDirectory()) {
        		
        	//////////////////////////////////////////////////////////
        	file = makeFile(_folder + "/" + _file);
        	
        	//file delete
        	if(file!=null&&file.exists())	file.delete();

        	//new file write
			FileOutputStream fos;
			try {
    			fos = new FileOutputStream(file);
    			fos.write(_txt.getBytes());
    			
                fos.flush();
                fos.getFD().sync();
    			fos.close();
			} catch (IOException e) {
				e.printStackTrace();
				Log.d("debug", "==========> err : " + e.toString());
			}
        	//////////////////////////////////////////////////////////
        }
		return "";
	}
	
	public static byte[] intToByteArray(int value) {
		byte[] byteArray = new byte[4];
		byteArray[0] = (byte)(value >> 24);
		byteArray[1] = (byte)(value >> 16);
		byteArray[2] = (byte)(value >> 8);
		byteArray[3] = (byte)(value);
		return byteArray;
	}
}
