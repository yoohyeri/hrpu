/*
 * Copyright 2009 Cedric Priscal
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */

package android_serialport_api.sample;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.InvalidParameterException;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android_serialport_api.HMSUartProtocol;
import android_serialport_api.SerialPort;
import android_serialport_api.ThreadRead;
import android_serialport_api.ThreadWrite;
import android_serialport_api.sample.MainMenu.MThreadRead;

public class ServiceUart extends Service {

	private BroadcastReceiver mReceiver;

	protected static Application mApplication;
	protected static SerialPort mSerialPort;
	protected static OutputStream mOutputStream;
	private static InputStream mInputStream;
	private static MThreadRead mThreadRead;
	private static ThreadWrite mThreadWrite;
	private static String FILTER_PC_TO_HRPU = "android.hmsintent.action.UART_PC_TO_HRPU";
	private static String FILTER_HRPU_TO_PC = "android.hmsintent.action.UART_HRPU_TO_PC";
	
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		Log.d("debug", "=>> onBind ");
		return null;
	}
	
	@Override
	public void onCreate() {
		// TODO Auto-generated method stub
		Log.d("debug", "=>> +++ onCreate ");
//		
//		IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
//        filter.addAction(Intent.ACTION_SCREEN_OFF);
//        mReceiver = new OnLock_BroadcastReceiver();
//        registerReceiver(mReceiver, filter);
		Log.d("debug", "=>> --- onCreate ");
		super.onCreate();
	}
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		// TODO Auto-generated method stub
		Log.d("debug", "=>> +++ onStartCommand ");
		
		IntentFilter filter = new IntentFilter();
	    filter.addAction(FILTER_HRPU_TO_PC);
	    mReceiver = new OnLock_BroadcastReceiver();
	    registerReceiver(mReceiver, filter);
		
		//kslee
		mApplication = (Application) getApplication();
		try {
			mSerialPort = mApplication.getSerialPort();
			
			mOutputStream = mSerialPort.getOutputStream();
			mInputStream = mSerialPort.getInputStream();
			/* Create a receiving thread */
			mThreadRead = new MThreadRead(mSerialPort);
			mThreadRead.start();
			
			mThreadWrite = new ThreadWrite(mSerialPort);
	//					mThreadRead.start();
		} catch (SecurityException e) {
	//					DisplayError(R.string.error_security);
		} catch (IOException e) {
	//					DisplayError(R.string.error_unknown);
		} catch (InvalidParameterException e) {
	//					DisplayError(R.string.error_configuration);
		}
		Log.d("debug", "=>> --- onStartCommand ");
		return super.onStartCommand(intent, flags, startId);
	}
	
	
	public class MThreadRead extends ThreadRead {
		public MThreadRead(SerialPort _sPort) throws SecurityException, IOException {
			super(_sPort);
			Log.d("debug", "=>> ServiceUart Main MThreadRead");
		}

		@Override
		protected void onDataReceived(byte _cmd1, byte _cmd2, byte[] buffer)
		{
			Log.d("debug", "=>> [2] [1] -> [2] onDataReceived : " + _cmd2);
			if(_cmd2 == HMSUartProtocol.CMD2_SET_SERIAL) {
				Log.d("debug", "=>> [2] mSendBroadcast(serial, buffer);");
				mSendBroadcast("serial", buffer);
			} else if(_cmd2 == HMSUartProtocol.CMD2_SET_CAS_ID) {
				Log.d("debug", "=>> [2] mSendBroadcast(CAS_ID, buffer);");
				mSendBroadcast("CAS_ID", buffer);
			} else if(_cmd2 == HMSUartProtocol.CMD2_SET_CONNECT) {
				mThreadWrite.mSendData(_cmd1, _cmd2,	HMSUartProtocol.CMD2_SET_CONNECT);
			} else if(_cmd2 == HMSUartProtocol.CMD2_GET_SERIAL) {
				mSendBroadcast("GET_SERIAL", buffer);
			} else if(_cmd2 == HMSUartProtocol.CMD2_GET_CAS_ID) {
				mSendBroadcast("GET_CAS_ID", buffer);
			}
		}
		
		
	}
	
	void mSendBroadcast(String _key, byte[] _value) {
	    Intent _intent = new Intent(FILTER_PC_TO_HRPU);
	    _intent.putExtra(_key, _value);
	    
	    sendBroadcast(_intent);
	}
	
	public class OnLock_BroadcastReceiver extends BroadcastReceiver{
		 
	    @Override
	    public void onReceive(Context context, Intent intent) {
	    	Log.d("debug", "[2] onReceive FILTER_HRPU_TO_PC");
	        if(intent.getAction().equals(FILTER_HRPU_TO_PC))
	        {
	          	Log.d("debug", "[2] onReceive FILTER_HRPU_TO_PC");
	        	String _serial_result = intent.getStringExtra("serial_result");
	        	String _save = intent.getStringExtra("save");
	        	String _cas_id_result = intent.getStringExtra("cas_id_result");
	        	String _get_serial = intent.getStringExtra("GET_SERIAL");
	        	String _get_cas_id = intent.getStringExtra("GET_CAS_ID");
	        	
	        	
	        	if(_save != null && _save.length() > 0) {
	        		Log.d("debug", "=>> _save");
	        		mThreadWrite.mSendData(HMSUartProtocol.CMD1_VALUE, HMSUartProtocol.CMD2_SET_REPORT,_save.getBytes());
	        	}
	        	
	        	//----------
	        	if(_serial_result != null && _serial_result.length() > 0) {
	        		Log.d("debug", "=>> _serial_result");
	        		mThreadWrite.mSendData(HMSUartProtocol.CMD1_VALUE,HMSUartProtocol.CMD2_SET_SERIAL, _serial_result.getBytes());
	        	}
	        	
	        	if(_cas_id_result != null && _cas_id_result.length() > 0) {
	        		Log.d("debug", "=>> _cas_id_result");
	        		mThreadWrite.mSendData(HMSUartProtocol.CMD1_VALUE,HMSUartProtocol.CMD2_SET_CAS_ID, _cas_id_result.getBytes());
	        	}
	        	
	        	if(_get_serial != null && _get_serial.length() > 0) {
	        		Log.d("debug", "=>> _get_serial");
	        		mThreadWrite.mSendData(HMSUartProtocol.CMD1_VALUE,HMSUartProtocol.CMD2_GET_SERIAL, _get_serial.getBytes());
	        	}
	        	
	        	if(_get_cas_id != null && _get_cas_id.length() > 0) {
	        		Log.d("debug", "=>> _get_cas_id");
	        		mThreadWrite.mSendData(HMSUartProtocol.CMD1_VALUE,HMSUartProtocol.CMD2_GET_CAS_ID, _get_cas_id.getBytes());
	        	}
	        }
	    }
	}
}

