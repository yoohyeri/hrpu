package com.mobilusauto.app.productionprocess;

import java.util.*;

import com.mobilusauto.app.productionprocess.R;
import com.mobilusauto.app.productionprocess.protocol.DVDForyouProtocol;
import com.mobilusauto.app.productionprocess.protocol.HMSUartProtocol;

import android.app.*;
import android.bluetooth.BluetoothA2dp;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothProfile;
import android.bluetooth.BluetoothProfile.ServiceListener;
import android.content.*;
import android.graphics.Color;
import android.media.*;
import android.media.AudioManager.OnAudioFocusChangeListener;
import android.media.MediaRecorder.AudioSource;
import android.os.*;
import android.text.Html;
import android.util.Log;
import android.view.*;
import android.view.View.*;
import android.widget.*;
import android.widget.RelativeLayout.*;
import android.graphics.PorterDuff;


public class AVActivity extends Activity implements OnClickListener{

	private final String TAG = "YP-RSE AV";
	
	private FrameLayout fCameraPreview;
	private CameraPreview mCameraPreview;
	
	private boolean mIsAudioGain = false;
	private AudioManager mAudioManager;
	
	private BluetoothAdapter mBluetoothAdapter;
	private BluetoothA2dp mBluetoothA2dp;
	
	private IMTX mIHMS = IMTX.Stub.asInterface(ServiceManager.getService("motrex"));
	private BluetoothBroadcastReceiver mBroadcastReceiver;
	
	private Context mContext;
	
	private boolean mAVSurfaceViewVisible = false;
	
	
	private final Handler mCommandBarHandler = new Handler();
	
	private final int SHOW_DELAY_TIME								= 5120;
	
	/**
	 * LCD Size and Half LCD Size 
	 */
	public static int LCD_W, LCD_H, LCD_HW, LCD_HH;
	
//	private RelativeLayout.LayoutParams rlSettingParams;
	
	private final int STATUS_BARE_H				= 25;
	private final int NAVI_BAR_H				= 45;
	private final int SETTING_MARGIN			= 50;
	
	private final int STATE_ERROR = -1, STATE_SIGNAL_LOST = 0, STATE_SIGNAL_DETECTED = 1;
	
	private int mVideoState = STATE_ERROR;
	
		
//	IYPService mYPService = IYPService.Stub.asInterface(ServiceManager.getService(Context.YP_SERVICE));
	
	public final float ALPHA_ON = (float) 0.8;
	public final float ALPHA_OFF = (float) 1;
	
	private boolean mFirstRun = true;
	
	private final int AUDIO_ON = 0, AUDIO_OFF = 1;
	private int mAudioType = AUDIO_ON;
	
	private TextView mTitle;
	private Button mResultOK, mResultNG;
	private int mIndex;
	
	TextView mTV_black;
	
	boolean mIsAlive;;
	
	private IntentFilter mIntentfilter; 
	private BroadcastReceiver mReceiver;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_av);

		mIndex = getIntent().getIntExtra("_key", 0);
		String[] _str = getResources().getStringArray(R.array.arListTitle);
		
View _view = (View) findViewById(R.id.top);
		
		mTitle = (TextView) _view.findViewById(R.id.tv_title);
		mTitle.setText(_str[mIndex]);
		
		mResultOK = (Button) _view.findViewById(R.id.bt_result_ok);
		mResultOK.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_OK);
				//onBackPressed();
				finish();
			}
		});
		mResultOK.setEnabled(false);
		
		mResultNG = (Button) _view.findViewById(R.id.bt_result_ng);
		mResultNG.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_NG);
				//onBackPressed();
				finish();
			}
		});
		((TextView)_view.findViewById(R.id.tv_body)).setText(R.string.str_avin_body);
//		if(MainActivity.getInstace().mGetName().equals(_DEFINE.NAME_CHEONAN)) {
//			((TextView)_view.findViewById(R.id.tv_body1)).setVisibility(View.VISIBLE);
//			((TextView)_view.findViewById(R.id.tv_body1)).setText(R.string.str_avin_body_cheonan);
//		}
		
		mContext = this;
		
		/*
		 * AV 영상 출력을 위한 Component
		 */
		mCameraPreview = new CameraPreview(this.getApplicationContext(), DEBUG_.CAMERA_AV);
		fCameraPreview = (FrameLayout)findViewById(R.id.fCameraPreview);
		fCameraPreview.setOnClickListener(this);
		
		/*
		 * AudioFocus 상태를 확인하기 위한 리스너 
		 */
		mAudioManager = (AudioManager)getSystemService(Context.AUDIO_SERVICE);
//		mAudioManager.registerAudioFocusListener(mOnAudioFocusChangeListener);
		
		//---
		// ?��?�� �??��?�� Display ?��?�� ?���?
		Display display = ((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
		LCD_W = display.getWidth();
		LCD_H = display.getHeight();
		LCD_HW = LCD_W / 2;
		LCD_HH = LCD_H / 2;
				
		mAudioType = AUDIO_ON;
		
		mTV_black = (TextView) findViewById(R.id.tv_black);
		
		mIntentfilter = new IntentFilter(); 
		mIntentfilter.addAction("android.hmsintent.action.AUDIO_PATH_FOR_MENU");
		mReceiver = new BroadcastReceiver() {
			@Override
			public void onReceive(Context arg0, Intent arg1) {
				// TODO Auto-generated method stub
				new Handler().postDelayed(new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						if(mIsAlive) mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, _DEFINE.SOUND_MAX_LEVEL, 0);
					}
				}, 1000);
			}
		};
	}
	
	Handler mHandlerOKEnable = new Handler();
	Runnable mRunnableOKEnable = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			mResultOK.setEnabled(true);
		}
	};
	public final int DEFAULT_VOLUME_LEVEL = 15;
	@Override
	protected void onResume() {
		mIsAlive = true;
		
		registerReceiver(mReceiver, mIntentfilter);
		
		// TODO Auto-generated method stub
		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				if(mIsAlive == false)	return;
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetDVDStart(true);
				
				mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, DEFAULT_VOLUME_LEVEL, 0);
								
				fCameraPreview.addView(mCameraPreview);

				/*
				 * AudioFocus媛� �뾾�쓣寃쎌?�� �슂泥��븯硫�, System Media Path?���? HDMI濡� 蹂�寃�?븳�?��. 
				 */
				if(!mIsAudioGain) {
					mAudioManager.requestAudioFocus(mOnAudioFocusChangeListener,
							AudioManager.STREAM_MUSIC, 
							AudioManager.AUDIOFOCUS_GAIN);
					mIsAudioGain = true;
//					mSetServicePath(HMSIndex.MULTIMEDIA_PATH_AV);
				}
				
//				mShowSetting();
				
//				startRecordingAndPlay();
				
				mSetNaviShow(false);
//				mIV_Setting.setVisibility(View.GONE);
				//?���?

				mVideoState = STATE_SIGNAL_DETECTED;
				mSVCHandler.sendEmptyMessage(mVideoState);
				mAddCallBack();
			}
		}, 100);	
		
		mHandlerDetect.postDelayed(mRunnableDetect, DETECT_DELAY);
		
		mHandlerOKEnable.postDelayed(mRunnableOKEnable, _DEFINE.OK_ENABLE_TIME);
		
		super.onResume();
	}
	
	@Override
	protected void onPause() {
		mIsAlive = false;
		
		mHandlerDetect.removeCallbacks(mRunnableDetect);
		
		unregisterReceiver(mReceiver);
		
		super.onPause();
		
		mHandlerOKEnable.removeCallbacks(mRunnableOKEnable);
	
		MainActivity.getInstace().mSetDVDStart(false);
		
		if(mIsAudioGain)	{
			mSetServicePath(HMSIndex.MULTIMEDIA_PATH_CPU);
//			mSetMediaPathVideo(HMSIndex.MULTIMEDIA_PATH_CPU);
		}
		
		mReleaseCallBack();
//		stopRecordingAndPlay();
		
		if(mCommandBarHandler != null)
			mCommandBarHandler.removeCallbacks(mNaviShowHiddenRunnable);
		
		if(mCameraPreview.mIsCameraOpen() == true)	 mCameraPreview.mCameraClose();
//		finish();
		
		fCameraPreview.removeView(mCameraPreview);
		
		if(mIsAudioGain) {
//			mSetServicePath(HMSIndex.MULTIMEDIA_PATH_CPU);
			
			mIsAudioGain = false;			
			mAudioManager.unregisterAudioFocusListener(mOnAudioFocusChangeListener);
		}
	};
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		//super.onBackPressed();
	}
	
	
	
	private void mSetServicePath(int _id) 
	{
//		try {
//			mIHMS.setMultimediaPath(_id);
//		} catch (RemoteException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}
	
	
	private OnAudioFocusChangeListener mOnAudioFocusChangeListener = new OnAudioFocusChangeListener() {
		
		@Override
		public void onAudioFocusChange(int arg0) {
			// TODO Auto-generated method stub
			if(arg0 == AudioManager.AUDIOFOCUS_LOSS || arg0 == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT
					|| arg0 == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
				mIsAudioGain = false;
				mAudioManager.unregisterAudioFocusListener(mOnAudioFocusChangeListener);
				
				setResult(RESULT_OK);
				//onBackPressed();
			} else if(arg0 == AudioManager.AUDIOFOCUS_GAIN || arg0 == AudioManager.AUDIOFOCUS_GAIN_TRANSIENT ||
					arg0 == AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK) {
			}
		}
	};
	
	/**
	 * Bluetooth Power �긽�깭蹂� 泥섎?��
	 * @param state Bluetooth Power �긽�깭
	 */
	private void procBluetoothPowerState(int state) {
		
		switch(state) {
			case BluetoothAdapter.STATE_TURNING_ON:
				Log.d(TAG, "BluetoothAdapter.STATE_TURNING_ON");
				break;
			case BluetoothAdapter.STATE_ON:
				Log.d(TAG, "BluetoothAdapter.STATE_ON");
				break;
			case BluetoothAdapter.STATE_TURNING_OFF:
				Log.d(TAG, "BluetoothAdapter.STATE_TURNING_OFF");
				break;
			case BluetoothAdapter.STATE_OFF:
				Log.d(TAG, "BluetoothAdapter.STATE_OFF");
				break;
		}
	}
	
	/**
	 * Bluetooth A2dp �긽�깭蹂� 泥섎?��
	 * @param state Bluetooth A2dp �긽�깭
	 */
	private void procBluetoothA2dpState(int state) {
		switch(state) {
			case BluetoothA2dp.STATE_CONNECTING:
				Log.d(TAG, "2) BluetoothA2dp.STATE_CONNECTING");
				break;
			case BluetoothA2dp.STATE_CONNECTED:
				Log.d(TAG, "2) BluetoothA2dp.STATE_CONNECTED");
				break;
			case BluetoothA2dp.STATE_DISCONNECTING:
				Log.d(TAG, "2) BluetoothA2dp.STATE_DISCONNECTING");
				break;
			case BluetoothA2dp.STATE_DISCONNECTED:
				Log.d(TAG, "2) BluetoothA2dp.STATE_DISCONNECTED");
				break;
		}
	}
	
	
	private class BluetoothBroadcastReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub
			String action = intent.getAction();
			if(action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {
				int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF);
				procBluetoothPowerState(state);
			} else if(action.equals(BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED)) {
				int state = intent.getIntExtra(BluetoothA2dp.EXTRA_STATE, BluetoothA2dp.STATE_DISCONNECTED);
				procBluetoothA2dpState(state);
			}
		}
	}

	//-----------------------------------
	private AudioRecord mRecorder = null;
	private Thread mRecordingThread = null;
	private boolean mIsRecording = false;
	
	private final int mBufferSize = 4096;
	
	private int mSampleRate;
	private short mAudioFormat;
	private short mChannelConfig;
	 
	// �꽕�젙�븷 �닔 �엳�뒗 sampleRate, AudioFormat, channelConfig 媛�?�뱾�쓣 �젙�쓽
	private final int[] mSampleRates = new int[] {44100, 22050, 11025, 8000};
	private final short[] mAudioFormats = new short[] {AudioFormat.ENCODING_PCM_16BIT, AudioFormat.ENCODING_PCM_8BIT};
	private final short[] mChannelConfigs = new short[] {AudioFormat.CHANNEL_IN_STEREO, AudioFormat.CHANNEL_IN_MONO};
	
	private void startRecordingAndPlay() {
		mRecorder = findAudioRecord();
			
		if(mRecorder == null)	return;
			
		mRecorder.startRecording();
		mIsRecording = true;
		mRecordingThread = new Thread(new Runnable() {
			@Override
			public void run() {
				RecordingAndPlay();
			}
		});
		mRecordingThread.start();
	}
	private void RecordingAndPlay() {
		//short sData[] = new short[mBufferSize];
		byte sData[] = new byte[mBufferSize];
		int minBufferSize = AudioTrack.getMinBufferSize(mSampleRate, mChannelConfig, mAudioFormat);
		
		AudioTrack audioTrack = new AudioTrack(AudioManager.STREAM_MUSIC, mSampleRate, mChannelConfig, mAudioFormat, minBufferSize, AudioTrack.MODE_STREAM);
//		audioTrack.setVolume(1.0f);
		
		audioTrack.play();
		
		while (mIsRecording) {
			mRecorder.read(sData, 0, mBufferSize);
			//byte bData[] = short2byte(sData);
			audioTrack.write(sData, 0, sData.length);
		}
		audioTrack.stop();
		audioTrack.release();
	}
	private void stopRecordingAndPlay() {
		if (mRecorder != null) {
			mIsRecording = false;
			mRecorder.stop();
			mRecorder.release();
			mRecorder = null;
			mRecordingThread = null;
		}
	}
	
	private AudioRecord findAudioRecord() {
		for (int rate : mSampleRates) {
			for (short format : mAudioFormats) {
				for (short channel : mChannelConfigs) {
					try {
						int bufferSize = AudioRecord.getMinBufferSize(rate, channel, format);
						if (bufferSize != AudioRecord.ERROR_BAD_VALUE) {
							mSampleRate = rate;
							mAudioFormat = format;
							mChannelConfig = channel;
							
							AudioRecord recorder = new AudioRecord(AudioSource.DEFAULT, mSampleRate, mChannelConfig, mAudioFormat, bufferSize);
							if (recorder.getState() == AudioRecord.STATE_INITIALIZED) {
								return recorder;    // �쟻�떦�븳 �꽕�젙媛�?�뱾濡� �깮�꽦�맂 Recorder 諛섑?��
							}
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
		return null;                     // �쟻�떦�븳 �꽕�젙媛�?�뱾�쓣 李얠�? 紐삵�? 寃쎌?�� Recorder?���? 李얠�? 紐삵�??�� null 諛섑?��
	}
	
	private byte[] short2byte(short[] sData) {
		int shortArrsize = sData.length;
		byte[] bytes = new byte[shortArrsize * 2];
		for (int i = 0; i < shortArrsize; i++) {
			bytes[i * 2] = (byte) (sData[i] & 0x00FF);
			bytes[(i * 2) + 1] = (byte) (sData[i] >> 8);
			sData[i] = 0;
		}
		return bytes;
	}
	
	//-------------------------------------
	public void mSystemUIHiddenDelayTimeInit() {
		mCommandBarHandler.removeCallbacks(mNaviShowHiddenRunnable);
		mCommandBarHandler.postDelayed(mNaviShowHiddenRunnable, SHOW_DELAY_TIME);
	}
	
	private Runnable mNaviShowHiddenRunnable = new Runnable() {
		@Override
		public void run() {
			if(mAudioType == AUDIO_ON) {
				mSetNaviShow(false);
	//			mIV_Setting.setVisibility(View.GONE);
			}
		}
	};
	
	public void mSetNaviShow(boolean visible) {
//		int flag = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
//				| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
//				| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;
//		if (!visible) {
//			// We used the deprecated "STATUS_BAR_HIDDEN" for unbundling
//			flag |= 
////					View.STATUS_BAR_HIDDEN | 
//					View.SYSTEM_UI_FLAG_LAYOUT_STABLE
//			        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
//			        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
//			        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
//			        | View.SYSTEM_UI_FLAG_FULLSCREEN
//			        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
//		}
//		
//		mAVSurfaceViewVisible = visible;
//		fCameraPreview.setSystemUiVisibility(flag);
	}
	
	@Override
	public void onClick(View arg0) {
		int _id = arg0.getId();
		switch(_id) {
			default:
				if(mVideoState == STATE_SIGNAL_DETECTED)	
					mClickEvent(); 
				break;
		}
	}
	private void mClickEvent() {
		if(mAVSurfaceViewVisible) {
			mSetNaviShow(false);
			
			mCommandBarHandler.removeCallbacks(mNaviShowHiddenRunnable);
		} else {
			mSetNaviShow(true);
			
			mSystemUIHiddenDelayTimeInit();
		}
		
	}
	
	//-------------------
	//?���?
//	IYPService iYPService = IYPService.Stub.asInterface(ServiceManager.getService(Context.YP_SERVICE));
	private Handler mSVCHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {		
			mVideoState = msg.what;
			switch (msg.what) {
			case STATE_ERROR:
				mAVSurfaceViewVisible = false;
				mClickEvent();
				mCommandBarHandler.removeCallbacks(mNaviShowHiddenRunnable);
				
				mTV_black.setVisibility(View.VISIBLE);
				if(mCameraPreview.mIsCameraOpen() == true)	mCameraPreview.mCameraClose();
				
				break;
			case STATE_SIGNAL_LOST:

				mAVSurfaceViewVisible = false;
				mClickEvent();
				mCommandBarHandler.removeCallbacks(mNaviShowHiddenRunnable);
				
				mTV_black.setVisibility(View.VISIBLE);
				if(mCameraPreview.mIsCameraOpen() == true)	mCameraPreview.mCameraClose();
				break;
			case STATE_SIGNAL_DETECTED:

//				if(mFirstRun) {
//					mFirstRun = false;
//					mCameraPreview.mCameraOepn();
//				} else {
//					mSystemUIHiddenDelayTimeInit();
//				}

				mTV_black.setVisibility(View.GONE);
				if(mCameraPreview.mIsCameraOpen() == false)	mCameraPreview.mCameraOepn();
				break;
			}
		}
	};
	private void mAddCallBack() {
		//?���?
//		 try {
//	         iYPService.registerOnAVServiceCallback(mOnAVCallback);
//	    } catch (RemoteException e) {
//			 // TODO Auto-generated catch block
//			 e.printStackTrace();
//	    }
	}
	private void mReleaseCallBack() {
		//?���?
//		try {
//            iYPService.unregisterOnAVServiceCallback(mOnAVCallback);
//		} catch (RemoteException e) {
//		    // TODO Auto-generated catch block
//		    e.printStackTrace();
//		}
	}
	//?���?
//	private IYPAVServiceCallback mOnAVCallback = new IYPAVServiceCallback.Stub() {
//		/**
//		* TW9910?�� ?��?��?��?�� 감�? ?��?��?�� ?��?�� ?��출된?��.
//		* @param path TW9910 Path(?��?��?�� 미사?��)
//		* @param signal TW9910?�� ?��?�� 감�? ?��?��
//		* @param format CVBS ?��?�� ?���?? (?��?��?�� 미사?��)
//		*/
//		@Override
//		public void OnDetectSignal(int path, int signal, int format) throws RemoteException {
//		// TODO Auto-generated method stub
//			switch(signal) {
//				case -1: // Error
//				case 0:     // Signal lost
//				case 1:     // Signal Detected
////					mUpdateVideo();
//					mSVCHandler.sendEmptyMessage(signal);
//					break;
//			}
//		}
//	};
	private final int DETECT_DELAY	= 1000;
	private Handler mHandlerDetect = new Handler();
	private Runnable mRunnableDetect = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			int _sync = 0;
			boolean _state = false;
			
//			try {
//				_sync = mIHMS.getTW9910VideoSync();
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			try {
//				_state = mIHMS.getStatusAV();
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
			
			Log.d("debug", "==========> _state : " + _state + "   _sync : " + _sync + "   mVideoState : " + mVideoState);
			if(_state == true && mVideoState != STATE_SIGNAL_DETECTED ) {
				mVideoState = STATE_SIGNAL_DETECTED;
				
				if(mFirstRun)	startRecordingAndPlay();
				mFirstRun = false;				
				
				if(mCameraPreview.mIsCameraOpen() == false) {
					mTV_black.setVisibility(View.GONE);
					mCameraPreview.mCameraOepn();
//					mDisplayHandler.removeCallbacks(mDisplayRunable);
//					mDisplayHandler.postDelayed(mDisplayRunable, DISPLAY_DELEY);
				}
			} else if(_state == false && mVideoState != STATE_SIGNAL_LOST){
				mVideoState = STATE_SIGNAL_LOST;
//				if(mFirstRun) {
//					mDisplayHandler.removeCallbacks(mDisplayRunable);
//					mDisplayHandler.postDelayed(mDisplayRunable, DISPLAY_DELEY);
//				} else {
//					mDisconnect();
//				}
				if(mCameraPreview.mIsCameraOpen() == true)	 {
					mTV_black.setVisibility(View.VISIBLE);
					mCameraPreview.mCameraClose();
				}
			}
			mHandlerDetect.postDelayed(mRunnableDetect, DETECT_DELAY);
		}
	};
}
