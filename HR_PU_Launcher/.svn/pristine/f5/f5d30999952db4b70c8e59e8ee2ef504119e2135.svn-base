package com.mobilusauto.app.productionprocess;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import com.mobilusauto.app.productionprocess.R;

import android.app.Activity;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothA2dp;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothProfile;
import android.bluetooth.BluetoothUuid;
import android.bluetooth.BluetoothProfile.ServiceListener;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.HMSIndex;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.*;
import android.media.AudioManager.OnAudioFocusChangeListener;
import android.media.MediaRecorder.*;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IHMSCommunicationService;
import android.os.IYPService;
import android.os.Message;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.SystemProperties;
import android.provider.Settings;
import android.util.Log;
import android.view.*;
import android.view.View.OnClickListener;
import android.widget.*;
import android.widget.RelativeLayout.LayoutParams;

public class BluetoothActivity extends BaseActivity implements OnClickListener{
	private TextView mTitle;
	private Button mResultOK, mResultNG;
	private int mIndex;

	Button buttonScan;
	
	String[] mList;
	private CustomAdapter    m_Adapter;
	private ListView         m_ListView;
	
	private CustomAdapter    m_Adapter2;
	private ListView         m_ListView2;
	
	private ArrayList<String> mArrayAddress = new ArrayList<String>();;
	
	
	BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); //블루?��?�� ?��?��?�� 객체 ?���?
	
	private boolean mIsBluetoothReceiver = false;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_bluetoothi);
		
		mIndex = getIntent().getIntExtra("_key", 0);
		String[] _str = getResources().getStringArray(R.array.arListTitle);
		
		View _view = (View) findViewById(R.id.top);
		
		mTitle = (TextView) _view.findViewById(R.id.tv_title);
		mTitle.setText(_str[mIndex]);
		
		mResultOK = (Button) _view.findViewById(R.id.bt_result_ok);
		mResultOK.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_OK);
//				onBackPressed();
				finish();
			}
		});
		mResultOK.setEnabled(false);
		
		mResultNG = (Button) _view.findViewById(R.id.bt_result_ng);
		mResultNG.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_NG);
//				onBackPressed();
				finish();
			}
		});
		((TextView)_view.findViewById(R.id.tv_body)).setText(R.string.str_bluetooth_body);
		
		buttonScan = (Button) findViewById(R.id.buttonScan);
		buttonScan.setOnClickListener(this);
		buttonScan.setEnabled(false);
		
//		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
//		registerReceiver(mReceiver, filter); // Don't forget to unregister during onDestroy
//		ACTION_DISCOVERY_FINISHED 

		
		IntentFilter filter = new IntentFilter();
		filter.addAction(BluetoothDevice.ACTION_FOUND);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		this.registerReceiver(mReceiver, filter);
		mIsBluetoothReceiver = true;

		
		//-----------------
		m_Adapter = new CustomAdapter();         
        m_ListView = (ListView) findViewById(R.id.list_view);
        m_ListView.setAdapter(m_Adapter);
        
        //-------
        m_Adapter2 = new CustomAdapter();         
        m_ListView2 = (ListView) findViewById(R.id.list_view2);
        m_ListView2.setAdapter(m_Adapter2);
        
        listDevice();
        
		String _msg = getString(R.string.str_bt_address);
//		String macAddr = SystemProperties.get("persist.service.bdroid.bdaddr", "");
		String macAddr = mBluetoothAdapter.getAddress();
		
		 if(macAddr.length() > 16)	{
			 _msg = _msg.replace("%s", macAddr);
			 ((TextView) findViewById(R.id.tv_address)).setTextColor(_DEFINE.mYellowGreen);
		 }
	     else						_msg = _msg.replace("%s", getString(R.string.str_fail));
		 _msg = _msg.replace("%s", getString(R.string.str_fail));
        ((TextView) findViewById(R.id.tv_address)).setText(_msg);
        
        
	};
	
	public void listDevice(){ // 찾�? ?��바이?���? 리스?���? 보여주기
	    Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
	    
	    if(pairedDevices.size() > 0){ // ?��?�� ?��?�� �??��?�� 경우
	    	m_Adapter.removeAll();
	         for(BluetoothDevice device : pairedDevices){
	        	 m_Adapter.add(device.getName());
	         }
	    }
	}
	
	private final BroadcastReceiver mReceiver = new BroadcastReceiver() { //각각?�� ?��바이?��로�??�� ?��보�?? 받으?���? 만들?��?��?��
	    @Override
	    public void onReceive(Context context, Intent intent) {
	        String action = intent.getAction();
	        if(BluetoothDevice.ACTION_FOUND.equals(action)){
	            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
	            if(device == null || device.getName() == null) {
	            	return;
	            }
	            if(device.getName().length() > 0) {
	            	for(int i=0; i<mArrayAddress.size(); i++) {
	            		if(mArrayAddress.get(i).equals(device.getAddress())) {
	            			return;
	            		}
	            	}
	            	int rssi = intent.getShortExtra(BluetoothDevice.EXTRA_RSSI,Short.MIN_VALUE);
	            	mArrayAddress.add(device.getAddress());
		            m_Adapter2.add(device.getName() + "            " + rssi);
		            m_Adapter2.notifyDataSetChanged();
	            } 
	        } else if (intent.getAction() == BluetoothAdapter.ACTION_DISCOVERY_STARTED ) {
	        	UpdateButton();
            }  else if (intent.getAction() == BluetoothAdapter.ACTION_DISCOVERY_FINISHED ) {
	        	UpdateButton();
            }
	    }
	};
	
	Handler mHandlerOKEnable = new Handler();
	Runnable mRunnableOKEnable = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			mResultOK.setEnabled(true);
		}
	};
	@Override
	protected void onResume() {
//		mDlg.show();

		if(mBluetoothAdapter.isDiscovering())	{
			Log.d("debug", "==========> BT onResume cancelDiscovery()");
			mBluetoothAdapter.cancelDiscovery();
		}
		else 									{
			Log.d("debug", "==========> BT onResume startDiscovery()");
			mBluetoothAdapter.startDiscovery();
		}
		
		UpdateButton();
		mHandlerOKEnable.postDelayed(mRunnableOKEnable, _DEFINE.OK_ENABLE_TIME);
		// TODO Auto-generated method stub
		super.onResume();
	}
	
	private void UpdateButton() {
		if(mBluetoothAdapter.isDiscovering()) {
			buttonScan.setText(R.string.str_searching);
			buttonScan.setEnabled(false);
			
		} else {
			buttonScan.setText(R.string.str_search);
			buttonScan.setEnabled(true);
		}
	}
	
	@Override
	protected void onPause() {
		mHandlerOKEnable.removeCallbacks(mRunnableOKEnable);
		
		if(mIsBluetoothReceiver) {
			unregisterReceiver(mReceiver);
		} else {
		}
		mIsBluetoothReceiver = false;
		
		super.onPause();
	};
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
	//	super.onBackPressed();
	}



	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub
		if (arg0.getId() == R.id.buttonScan) {
			if(mBluetoothAdapter.isDiscovering())	{
				Log.d("debug", "==========> BT onClick cancelDiscovery()");
				mBluetoothAdapter.cancelDiscovery();
			}
			else 						
			{
				Log.d("debug", "==========> BT onClick startDiscovery()");
				mArrayAddress.clear();
				m_Adapter.removeAll();
				m_Adapter2.removeAll();
				listDevice();
				mBluetoothAdapter.startDiscovery();
			}
		}
	}
	
	public void print(String string)
	{
//		String str = edit.getText().toString();
//		if(str.length() >0)
//		str +="\n\n";
//		 
//		str +=string;
//		 
//		edit.setText(str);
	}
	
	//-------------------
	public class CustomAdapter extends BaseAdapter {
	     
	    // ?��몄옄�뿴�쓣 蹂닿�? �븷 ArrayList
	    private ArrayList<String>    m_List;
	     
	    // �깮�꽦�옄
	    public CustomAdapter() {
	        m_List = new ArrayList<String>();
	    }
	 
	    // �쁽�옱 �븘�씠��?��?�� �닔?���? ?��?�꽩
	    @Override
	    public int getCount() {
	        return m_List.size();
	    }
	 
	    // �쁽�옱 �븘�씠��?��?�� �삤?��?��?���듃?���? ?��?�꽩, Object?���? �긽�솴�뿉 留욊�? 蹂�寃�?�?嫄곕�? ?��?�꽩諛쏆�? �삤?��?��?���듃?���? �?�??���똿�빐�꽌 �궗�슜
	    @Override
	    public Object getItem(int position) {
	        return m_List.get(position);
	    }
	 
	    // �븘�씠��?? position�쓽 ID 媛� ?��?�꽩
	    @Override
	    public long getItemId(int position) {
	        return position;
	    }
	 
	    // ?��?��?�� �맆 �븘�씠��?? ?���由�?
	    @Override
	    public View getView(int position, View convertView, ViewGroup parent) {
	        final int pos = position;
	        final Context context = parent.getContext();
	        // ?��?�뒪�듃媛� 湲몄뼱吏�硫?���? �쁽�옱 �솕硫댁�? 蹂댁?��吏� �븡�뒗 �븘�씠��?���? converView媛� null�씤 �긽�깭濡� �뱾�뼱 �샂
	        //if ( convertView == null ) {
	            // view媛� null�씪 寃쎌?�� ?�ㅼ?���� �젅�씠�븘�썐�쓣 �뼸�뼱 �샂
	            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            	convertView = inflater.inflate(R.layout.custom_full_list, parent, false);
	             
	            
	            TextView text = (TextView) convertView.findViewById(R.id.tv_text);
	            text.setText(m_List.get(position));
	            	             
	            // ?��?�뒪�듃 �븘�씠��?��?�� �꽣移� �뻽�쓣 �븣 �씠踰ㅽ?�� 諛쒖�?
//	            convertView.setOnClickListener(new OnClickListener() {	                 
//	                @Override
//	                public void onClick(View v) {	                	
//	                	Intent intentSubActivity = null;
//	                	if(m_List.get(pos).equals(getString(R.string.str_sound)) == true) 			intentSubActivity = new Intent(MainActivity.this, SoundActivity.class);                	
//	                	else if(m_List.get(pos).equals(getString(R.string.str_screen)) == true) 	intentSubActivity = new Intent(MainActivity.this, ScreenActivity.class);
//	                	else if(m_List.get(pos).equals(getString(R.string.str_system)) == true) 	intentSubActivity = new Intent(MainActivity.this, SystemActivity.class);
//	                	else if(m_List.get(pos).equals(getString(R.string.str_bluetooth)) == true) 	intentSubActivity = new Intent(Settings.ACTION_BLUETOOTH_SETTINGS);
//	                	else if(m_List.get(pos).equals(getString(R.string.str_handle)) == true) 	intentSubActivity = new Intent(MainActivity.this, HandleActivity.class);
//	                	else if(m_List.get(pos).equals(getString(R.string.str_network)) == true)  	intentSubActivity = new Intent(Settings.ACTION_WIFI_SETTINGS);
//	                	else return;
//
//	                	startActivity(intentSubActivity);
//	                }
//	            });	            
	        //}
	             
	        return convertView;
	    }
	     
	    // �쇅?����뿉��? �븘�씠��?? ?��붽� �슂泥� �떆 �궗�슜
	    public void add(String _msg) {
	        m_List.add(_msg);
	    }
	     
	    // �쇅?����뿉��? �븘�씠��?? �궘�젣 �슂泥� �떆 �궗�슜
	    public void remove(int _position) {
	        m_List.remove(_position);
	    }
	    public void removeAll() {
	        m_List.clear();
	    }
	}
}
