package com.mobilus.hp.rearcamera;
import java.io.IOException;

import android.content.Context;
import android.hardware.Camera;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.hardware.RearCamera;

public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback
{
	private final String TAG = "HP-Camera Preview";
	private final boolean DEBUG = true;
	
	private Camera mCamera = null;
    private SurfaceHolder mHolder;
    
    private boolean mIsCameraOpen = false;
    
    public static boolean Earlycam;
    
	@SuppressWarnings("deprecation")
	public CameraPreview(Context context) 
	{
		super(context);
		
		try {
			mCamera = Camera.open();
			mIsCameraOpen = true;
		} catch (RuntimeException e) {
			// TODO: handle exception
		}
		
		mHolder = getHolder();
		mHolder.addCallback(this);
		mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
	}

	@Override
	public void surfaceCreated(SurfaceHolder surfaceHolder) 
	{
		

		// Surface가 생성 --> 프리뷰를 어디에 띄울지 지정해준다. (Holder로 받은 SurfaceHolder에 뿌려준다.)
		/*
		try {
			mCamera = Camera.open();
			mIsCameraOpen = true;
		} catch (RuntimeException e) {
			// TODO: handle exception
		}
		*/
		
		try 
		{
			mCamera.setPreviewDisplay(surfaceHolder);
		} 
		catch (IOException e) 
		{
			if(DEBUG) Log.d(TAG, "Error setting camera preview" + e.getMessage());
            mCamera.release();
            mCamera = null;
		}
		catch(NullPointerException ne)
		{
			if(DEBUG) Log.d(TAG, "Error setting camera preview" + ne.getMessage());
		}
	}

	@Override
	public void surfaceChanged(SurfaceHolder surfaceHolder, int format, int width, int height) 
	{
		//Log.d("camera", "[1] width : " + width + ", height" + height);
		
		// 프리뷰를 회전시키거나 변경 시 처리를  여기서 해준다.
        // 프리뷰 변경시에는 먼저 프리뷰를 멈춘다음 변경해야 한다.
        if(mHolder.getSurface() == null)
        {
            // 프리뷰가 존재하지 않을 때
            return;
        }
        
        // 프리뷰가 존재하면 우선 멈춘다.
        
        try 
        {
            mCamera.stopPreview();
        } 
        catch (Exception e) 
        {
            // 프리뷰가 존재조차 하지 않는 경우
        }
        
        
        // 프리뷰 변경, 처리 등을 여기서 해준다.
        Camera.Parameters parameters;
        try 
        {
        	parameters = mCamera.getParameters();
		} 
        catch (NullPointerException e) 
        {
        	if(DEBUG) Log.d(TAG, "Error starting camera preview : " + e.getMessage());
			return;
		}
        
//	    List<Camera.Size> pictureSizeList = parameters.getSupportedPreviewSizes();
//	    for(Camera.Size size : pictureSizeList)
//	    {
//	        Log.d("##Preview Size##", "width: "+size.width+"("+width+")"+"height :"+size.height+"("+height+")");
//	    }

      //parameters.setPreviewFormat(format);
//        Camera.Size size = getBestPreviewSize(width, height);
        parameters.setPreviewSize(width, height);

//        Log.d(TAG, "width : " + size.width + ", height : " + size.height);

        mCamera.setParameters(parameters);
        
        // 새로 변경된 설정으로 프리뷰를 재생성한다.
        try
        {
//        	Log.d(TAG, "startPreview");
            mCamera.setPreviewDisplay(surfaceHolder);
            mCamera.startPreview();
        }
        catch (Exception e)
        {
        	if(DEBUG) Log.d(TAG, "Error starting camera preview: " + e.getMessage());
        }
        
        if(Earlycam) {
        	RearCamera.stopEarlyCamera();
            RearCamera.disableCMControl();
            SystemProperties.set("persist.sys.earlycam.handover", "complete");
            Earlycam = false;
        }
        
        SystemClock.sleep(500);
                
//        Thread thread = new Thread();
//        try {
//			thread.sleep(3000);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) 
	{
		// 프리뷰 제거시 카메라 사용도 끝났다고 간주하여 리소스를 전부 반환
        if(mCamera != null)
        {
//        	Log.d(TAG, "stopPreview");
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
        }
	}
	
	public void mCameraClose() {
		if(mCamera != null && mIsCameraOpen) {
			mIsCameraOpen = false;
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
        }
	}
	
	
	
//	private Camera.Size getBestPreviewSize(int width, int height) 
//	{
//		Camera.Size result = null;
//        Camera.Parameters p = mCamera.getParameters();
//        
//        for(Camera.Size size : p.getSupportedPreviewSizes())
//        {
//            if(size.width <= width && size.height <= height)
//            {
//                if(result == null)
//                {
//                    result = size;
//                }
//                else
//                {
//                    int resultArea = result.width*result.height;
//                    int newArea = size.width*size.height;
//                    if(newArea > resultArea)
//                    {
//                        result = size;
//                    }
//                }
//            }
//        }
//        return result;
//	}
}
