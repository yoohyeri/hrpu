/*
package com.mobilus.hp.rearcamera;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.TextView;

public class MainActivity extends Activity {

	private final String TAG = "HP-Rear Camera";
	
	private FrameLayout fCameraPreview;
	private CameraPreview mCameraPreview;
    private TextView btnBack, imgParkingLine;
    private boolean mShowGuideLine = true;
    
    private BroadcastReceiver mReceiver = null;
    
    private static final String ACTION_USER_REAR_CAMERA_START   = "android.intent.action.USER_REAR_CAMERA_START";
    private static final String ACTION_USER_REAR_CAMERA_STOP   = "android.intent.action.USER_REAR_CAMERA_STOP";
    private static final String ACTION_USER_SHORT_POWER_BUTTON   = "android.intent.action.USER_SHORT_POWER_BUTTON";
    private static final String ACTION_USER_LONG_POWER_BUTTON    = "android.intent.action.USER_LONG_POWER_BUTTON";
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		Log.i(TAG, "~~~~~~~~ onCreate ");
		
		// 타이틀 없는 화면으로 설정
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
				
		setContentView(R.layout.activity_main);
		
		mCameraPreview = new CameraPreview(this.getApplicationContext());
		fCameraPreview = (FrameLayout)findViewById(R.id.fCameraPreview);
		imgParkingLine = (TextView) findViewById(R.id.parking_line);
		
		btnBack = (TextView) findViewById(R.id.btnBack);
		btnBack.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				Log.d(TAG, "btnBack");
				
				Intent intent = new Intent();
				intent.setAction(ACTION_USER_REAR_CAMERA_STOP);
				sendBroadcast(intent);
			}
		});
		btnBack.setVisibility(View.GONE);
		
		Log.d(TAG, "guide : " + getIntent().getBooleanExtra("Guide", true));
		mShowGuideLine = getIntent().getBooleanExtra("Guide", true);
		if(!mShowGuideLine)
			imgParkingLine.setVisibility(View.GONE);
		else
			imgParkingLine.setVisibility(View.VISIBLE);
		mSetNaviShow(false);
	}
	
	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		Log.i(TAG, "~~~~~~~~ onStart ");
		super.onStart();
	}

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		Log.i(TAG, "~~~~~~~~ onResume ");
		super.onResume();    	
		if (fCameraPreview.getChildCount() == 0)
			fCameraPreview.addView(mCameraPreview);
		
		registerReceiver();
	}

	@Override
	protected void onPause() {
		Log.i(TAG, "~~~~~~~~ onPause ");
		// TODO Auto-generated method stub
		Log.d(TAG, "onPause");
		super.onPause();
		
		// Stop Preview
		fCameraPreview.removeView(mCameraPreview);
		unregisterReceiver();
		
		mCameraPreview.mCameraClose();		
		
		System.exit(0);
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		
		Log.i(TAG, "~~~~~~~~ onDestroy ");
		Log.d(TAG, "onDestroy");
		super.onDestroy();

	}
	
	private void registerReceiver()
	{
		final IntentFilter theFilter = new IntentFilter();
        theFilter.addAction(ACTION_USER_REAR_CAMERA_STOP);

        this.mReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                if(intent.getAction().equals(ACTION_USER_REAR_CAMERA_STOP)){
                	Log.d(TAG, "============ ACTION_USER_REAR_CAMERA_STOP ===========");
                	finish();
                }
            }
        };
        this.registerReceiver(this.mReceiver, theFilter);
	}
	
    private void unregisterReceiver() {
        if(mReceiver != null){
              this.unregisterReceiver(mReceiver);
            mReceiver = null;
     }

  }
	
	@SuppressLint("NewApi")
	public void mSetNaviShow(boolean visible) {
		int option = fCameraPreview.getSystemUiVisibility();	
				
		if(visible) {
			option &= ~(View.SYSTEM_UI_FLAG_LAYOUT_STABLE
					| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
					| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
					| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
					| View.SYSTEM_UI_FLAG_FULLSCREEN
					| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);	
		}
		else {
			option |= View.SYSTEM_UI_FLAG_LAYOUT_STABLE
					| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
					| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
					| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
					| View.SYSTEM_UI_FLAG_FULLSCREEN
					| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
		}
		
		fCameraPreview.setSystemUiVisibility(option);
		
		if(visible) {
			getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
		}
		else {
			getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		}
	}
}

*/

package com.mobilus.hp.rearcamera;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.os.SystemProperties;

public class MainActivity extends Activity {

	private final String TAG = "HP-Rear Camera";
	
    public static boolean mShowGuideLine = true;
    
    private BroadcastReceiver mReceiver = null;
    //public static boolean bIsFinish = false;
    //private FrameLayout fCameraPreview = null;
    
    private static final String ACTION_USER_REAR_CAMERA_START   = "android.intent.action.USER_REAR_CAMERA_START";
    public static final String ACTION_USER_REAR_CAMERA_STOP   = "android.intent.action.USER_REAR_CAMERA_STOP";
    private static final String ACTION_USER_SHORT_POWER_BUTTON   = "android.intent.action.USER_SHORT_POWER_BUTTON";
    private static final String ACTION_USER_LONG_POWER_BUTTON    = "android.intent.action.USER_LONG_POWER_BUTTON";
    
    //private CameraPreview mPreview;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		Log.i(TAG, "Reverse >> onCreate ");
		
		CameraPreview.Earlycam = getIntent().getBooleanExtra("Earlycam", false);
	
		Intent intent = new Intent(getApplicationContext(), RearCameraService.class);
		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		startService(intent);
		
		// 타이틀 없는 화면으로 설정
		this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
				
		//setContentView(R.layout.camera_layout);
		//fCameraPreview = (FrameLayout)findViewById(R.id.fCameraPreview);
		
		//mShowGuideLine = getIntent().getBooleanExtra("Guide", true);
		
		mShowGuideLine = SystemProperties.getBoolean("mtx.system.parkingline", true);
		//bIsFinish = false;
		
//		Intent intent = new Intent(getApplicationContext(), RearCameraService.class);
//		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//		startService(intent);
		//mPreview = new CameraPreview(this);
		//intent.fCameraPreview.addView(mPreview);
	}
	
	@Override
	protected void onStart() {
		super.onStart();
	}

	@Override
	protected void onResume() {
		super.onResume();    	
		
		registerReceiver();
	}

	@Override
	protected void onPause() {
		Log.d(TAG, "onPause");
//		Intent _intent = new Intent(getApplicationContext(), RearCameraService.class);
//		stopService(_intent);
		//unregisterReceiver();
		super.onPause();
	}

	@Override
	protected void onDestroy() {
		Log.d(TAG, "onDestroy");
		Intent _intent = new Intent(getApplicationContext(), RearCameraService.class);
		stopService(_intent);
		super.onDestroy();

	}
	
//	private void registerReceiver()
//	{
//		final IntentFilter theFilter = new IntentFilter();
//        theFilter.addAction(ACTION_USER_REAR_CAMERA_STOP);
//
//        this.mReceiver = new BroadcastReceiver() {
//            @Override
//            public void onReceive(Context context, Intent intent) {
//                if(intent.getAction().equals(ACTION_USER_REAR_CAMERA_STOP)){
////                	bIsFinish = true;
//                	
//                	Log.d(TAG, "============ ACTION_USER_REAR_CAMERA_STOP ===========");
//                	
//                	Intent _intent = new Intent(getApplicationContext(), RearCameraService.class);
//        			//intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//        			stopService(_intent);
//					
//        			unregisterReceiver();
//        			System.exit(0);
//        			//finish();
//                }
//            }
//        };
//        this.registerReceiver(this.mReceiver, theFilter);
//	}
	
	public static final String MOUNT_EVENT = "mtx.intent.action.mount";
	public static final String UNMOUNT_EVENT = "mtx.intent.action.unmount";
	private void registerReceiver()
	{
		Log.d(TAG, "Reverse ============ registerReceiver ===========");
		
		final IntentFilter intentfilter = new IntentFilter();
		intentfilter.addAction(MOUNT_EVENT);
		intentfilter.addAction(UNMOUNT_EVENT);
        
		this.mReceiver = new BroadcastReceiver() {

			@Override
			public void onReceive(Context arg0, Intent intent) {	
				String action = intent.getAction();
            	Handler handler = new Handler();
            	
            	Log.d(TAG, "Reverse ============ onReceive ===========" + action);
            	
				if (action.equals(UNMOUNT_EVENT)) {
					Log.i(TAG, "Reverse // MEDIA_UNMOUNTED // navigation : " + SystemProperties.getBoolean("mtx.system.navigation", false));
					if(SystemProperties.getBoolean("mtx.system.navigation", false)) {
						RearCameraService.msgReboot.setVisibility(View.VISIBLE);
					}
				} 	
				else if(action.equals(MOUNT_EVENT)) {
					Log.i(TAG, "Reverse // MEDIA_MOUNTED // navigation : " + SystemProperties.getBoolean("mtx.system.navigation", false));
				
				}
			}
		};
		this.registerReceiver(this.mReceiver, intentfilter);    
	}
	
	


    public void unregisterReceiver() {
        if(mReceiver != null){
              this.unregisterReceiver(mReceiver);
            mReceiver = null;
     }
  }
}