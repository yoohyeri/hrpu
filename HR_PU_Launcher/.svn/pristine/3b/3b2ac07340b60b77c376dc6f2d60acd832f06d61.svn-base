#pragma once
#include "afxwin.h"

#define MAXBUF 50000
#define InBufSize	50000
#define  OutBufSize 50000
#define  ASCII_XON  0x11
#define  ASCII_XOFF 0x13
#define  WM_MYRECEIVE (WM_USER+1)
#define  WM_MYCLOSE (WM_USER+2)

//value
const byte SOP = (byte)0xAA;
const byte EOP = (byte)0x55;
const byte TYPE = (byte)0x01;

//index
const int INDEX_STOP = 0;
const int INDEX_TYPE = 1;
const int INDEX_LEN = 2;
const int INDEX_CMD1 = 3;
const int INDEX_CMD2 = 4;
const int INDEX_DATA = 5;

//len
const int PACKET_TOTAL_LEN = 7; // 8(SOP ~ EOP) - 1(DATA)
const int PACKET_CMD_TO_CS = 3; // CMD1, CMD2, CS
const int CS_MIN = 4; // LEN, CMD1 CMD2 DATA(1byte)
class CMycomm :
	public CCmdTarget
{
public:
	CMycomm();
	~CMycomm();

public:
	HANDLE m_hComDev;
	HWND	m_hWnd;

	BOOL	m_bIsOpenned;
	CString	m_sComPort;
	CString	m_sBaudRate;
	CString m_sParity;
	CString m_sDataBit;
	CString	m_sStopBit;
	BOOL	m_bFlowChk;

	OVERLAPPED m_OLR, m_OLW;
	char	m_sInBuf[MAXBUF * 2];
	int		m_nLength;
	CEvent* m_pEvent;

	//Operations
public:
	void Clear();
	int	Receive(LPSTR inbuf, int len);
	BOOL Send(byte _cmd1, byte _cmd2, LPCTSTR outbuf);
	BOOL Create(HWND hWnd);
	void HandleClose();
	void Close();
	void ResetSerial();
	CMycomm(CString port, CString baudrate, CString parity, CString databit, CString stopbit);

	int MakeCRC(byte *_pBuf, int _size);
};

