package com.mobilusauto.app.productionprocess;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import com.mobilusauto.app.productionprocess.R;

import android.app.Activity;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothA2dp;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothProfile;
import android.bluetooth.BluetoothUuid;
import android.bluetooth.BluetoothProfile.ServiceListener;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.HMSIndex;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.media.*;
import android.media.AudioManager.OnAudioFocusChangeListener;
import android.media.MediaRecorder.*;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IHMSCommunicationService;
//import android.os.IYPHDMIServiceCallback;
import android.os.IYPService;
import android.os.Message;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.SystemProperties;
import android.provider.Settings;
import android.util.Log;
import android.view.*;
import android.view.View.OnClickListener;
import android.widget.*;
import android.widget.RelativeLayout.LayoutParams;

public class WiFiActivity extends BaseActivity implements OnClickListener{
	private TextView mTitle;
	private Button mResultOK, mResultNG;
	private int mIndex;

	//private static final String TAG = "maluchi";
	WifiManager wifi;
	BroadcastReceiver receiver;
	 
	Button buttonScan;
	
	String[] mList;
	private CustomAdapter    m_Adapter;
	private ListView         m_ListView;
	
	
	private boolean mIsScan = false;


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_wifi);
		
		mIndex = getIntent().getIntExtra("_key", 0);
		String[] _str = getResources().getStringArray(R.array.arListTitle);
		
		View _view = (View) findViewById(R.id.top);
		
		mTitle = (TextView) _view.findViewById(R.id.tv_title);
		mTitle.setText(_str[mIndex]);
		
		mResultOK = (Button) _view.findViewById(R.id.bt_result_ok);
		mResultOK.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_OK);
//				onBackPressed();
				finish();
			}
		});
		mResultOK.setEnabled(false);
		
		mResultNG = (Button) _view.findViewById(R.id.bt_result_ng);
		mResultNG.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_NG);
//				onBackPressed();
				finish();
			}
		});
		((TextView)_view.findViewById(R.id.tv_body)).setText(R.string.str_wifi_body);
		
		//-----------------
		// Setup UI
		buttonScan = (Button) findViewById(R.id.buttonScan);
		buttonScan.setOnClickListener(this);
		
		 
		// Setup WiFi
		wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);
		 
		// Get WiFi status
		WifiInfo info = wifi.getConnectionInfo();
//		textStatus.append("\n\nWiFi Status: " + info.toString());
		 
		// List available networks
		List<WifiConfiguration> configs = wifi.getConfiguredNetworks();
//		for (WifiConfiguration config : configs) {
//			textStatus.append("\n\n" + config.toString());
//		}

		// Register Broadcast Receiver
		
		if(receiver == null) {
			receiver = new BroadcastReceiver() {
				
				@Override
				public void onReceive(Context arg0, Intent arg1) {
					// TODO Auto-generated method stub
					// TODO Auto-generated method stub
					mIsScan = false;
					UpdateButton();
					mCancelProgress();
					
					List<ScanResult> results = wifi.getScanResults();
					ScanResult bestSignal = null;
					String message = String.format("%s networks found.\n", results.size());
					 
					Log.d("maluchi", "onReceive() message: " + message);
					 
					buttonScan.setEnabled(true);
					
					m_Adapter.removeAll();
					for (ScanResult result : results) {
						if (bestSignal == null || WifiManager.compareSignalLevel(bestSignal.level, result.level) < 0)
						{
							bestSignal = result;		 
						}       
					 
						if(result.SSID.length() > 0)	
							m_Adapter.add(result.SSID + "    Level : " + result.level, result.level >= -55 ? true : false);
							
//						String strStrong = String.format("%s is detected.\n", result.SSID);
//						message +=strStrong;
//						Log.d("maluchi", "AP: " + strStrong);
					}
					
					m_Adapter.notifyDataSetChanged();
					 
//					String msg = String.format("%s is the strongest.", bestSignal.SSID);
//					Toast.makeText(WiFiActivity.this, msg, Toast.LENGTH_LONG).show();
//					 
//					message +=msg;
//					 
//					print(message);
				}
			};
		}
		 
		registerReceiver(receiver, new IntentFilter(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));
		
		//-----------------
		m_Adapter = new CustomAdapter();         
        m_ListView = (ListView) findViewById(R.id.list_view);
        m_ListView.setAdapter(m_Adapter);
        
        //MacAddr
        WifiManager wifiMan = (WifiManager)this.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        
        WifiInfo wifiInf = wifiMan.getConnectionInfo();
        String macAddr = wifiInf.getMacAddress();
        Log.d("APP", "MacAddr: " + macAddr);
        
        String _msg = getString(R.string.str_wifi_address);
        if(macAddr.length() > 16)	{
        	_msg = _msg.replace("%s", macAddr);
        	((TextView) findViewById(R.id.tv_address)).setTextColor(_DEFINE.mYellowGreen);
        }
        else						_msg = _msg.replace("%s", getString(R.string.str_fail));
        _msg = _msg.replace("%s", getString(R.string.str_fail));
        ((TextView) findViewById(R.id.tv_address)).setText(_msg);

	}
	
	private void UpdateButton() {
		if(mIsScan == true) {
			buttonScan.setText(R.string.str_searching);
			buttonScan.setEnabled(false);
			
		} else {
			buttonScan.setText(R.string.str_search);
			buttonScan.setEnabled(true);
		}
	}
	
	Handler mHandlerOKEnable = new Handler();
	Runnable mRunnableOKEnable = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			mResultOK.setEnabled(true);
		}
	};
	@Override
	protected void onResume() {
		wifi.startScan();
		
		mIsScan = true;
		UpdateButton();
		mShowProgress();
		// TODO Auto-generated method stub
		mHandlerOKEnable.postDelayed(mRunnableOKEnable, _DEFINE.OK_ENABLE_TIME);
		
		super.onResume();
	}
	
	@Override
	protected void onPause() {
		mHandlerOKEnable.removeCallbacks(mRunnableOKEnable);
		try{
			unregisterReceiver(receiver);
		} catch(IllegalArgumentException e){
			
		}
		super.onPause();
	};
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
//		super.onBackPressed();
	}



	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub
		if (arg0.getId() == R.id.buttonScan) {
			Log.d("maluchi", "onClick() wifi.startScan()");
			wifi.startScan();
			
			mIsScan = true;
			UpdateButton();
			mShowProgress();
		}
	}
	
	public void print(String string)
	{
//		String str = edit.getText().toString();
//		if(str.length() >0)
//		str +="\n\n";
//		 
//		str +=string;
//		 
//		edit.setText(str);
	}
	
	//-------------------
	public class CustomAdapter extends BaseAdapter {
	     
	    // ?��몄옄�뿴�쓣 蹂닿�?? �븷 ArrayList
	    private ArrayList<String>    m_List;
	    private ArrayList<Boolean>   m_ListGreen;
	     
	    // �깮�꽦�옄
	    public CustomAdapter() {
	        m_List = new ArrayList<String>();
	        m_ListGreen = new ArrayList<Boolean>();
	    }
	 
	    // �쁽�옱 �븘�씠��?��?�� �닔?���?? ?��?�꽩
	    @Override
	    public int getCount() {
	        return m_List.size();
	    }
	 
	    // �쁽�옱 �븘�씠��?��?�� �삤?��?��?���듃?���?? ?��?�꽩, Object?���?? �긽�솴�뿉 留욊�?? 蹂�寃�?�??嫄곕�?? ?��?�꽩諛쏆�?? �삤?��?��?���듃?���?? �??�???���똿�빐�꽌 �궗�슜
	    @Override
	    public Object getItem(int position) {
	        return m_List.get(position);
	    }
	 
	    // �븘�씠��?? position�쓽 ID 媛� ?��?�꽩
	    @Override
	    public long getItemId(int position) {
	        return position;
	    }
	 
	    // ?��?��?�� �맆 �븘�씠��?? ?���由�??
	    @Override
	    public View getView(int position, View convertView, ViewGroup parent) {
	        final int pos = position;
	        final Context context = parent.getContext();
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        	convertView = inflater.inflate(R.layout.custom_full_list, parent, false);
             
            
            TextView text = (TextView) convertView.findViewById(R.id.tv_text);
            text.setText(m_List.get(position));
            
            if(m_ListGreen.get(position) == true)	text.setTextColor(_DEFINE.mYellowGreen);
            else									text.setTextColor(_DEFINE.mRed);
	             
	        return convertView;
	    }
	     
	    // �쇅?����뿉��?? �븘�씠��?? ?��붽� �슂泥� �떆 �궗�슜
	    public void add(String _msg, boolean _flag) {
	        m_List.add(_msg);
	        m_ListGreen.add(_flag);
	    }
	     
	    // �쇅?����뿉��?? �븘�씠��?? �궘�젣 �슂泥� �떆 �궗�슜
	    public void remove(int _position) {
	        m_List.remove(_position);
	        m_ListGreen.remove(_position);
	    }
	    public void removeAll() {
	        m_List.clear();
	        m_ListGreen.clear();
	    }
	}
}
