package com.mdstec.android.tpeg.decoder;

import java.io.File;

import com.mdstec.android.tpeg.TpegDecoder;
import com.mdstec.android.tpeg.ITpegDecService;
import com.mdstec.android.tpeg.ITpegDecCallback;
import com.mdstec.android.tpeg.config.CONFIG;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.RemoteException;
import android.util.Log;

public class TpegService extends Service {
	private static final String TAG = TpegService.class.getName();
	@SuppressWarnings("unused")
	private TpegDecoder decoder = new TpegDecoder(); // 코드를 정의한 클래스
	private static ITpegDecCallback mCallback = null;

	static boolean runningStatus = false;

	public static boolean getRunningStatus() {
		return runningStatus;
	}

	public static void eventCallback(byte[] data, int eventCode, int subType) {
		if (mCallback != null) {
			try {
				mCallback.eventCallback(data, eventCode, subType);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	@Override
	public void onCreate() {
		// TODO Auto-generated method stub
		super.onCreate();
		Log.i(TAG, "onCreate");

		try {
			File file = new File(Tpegdec.tpegRootPath);
			file.mkdirs();
		} catch (Exception e) {
			System.out.println("catch :" + e);
		}

		if (runningStatus == false) {
			// 방송사, 파일저장위치 설정
			Tpegdec.initTpeg(CONFIG.ServiceProvider, Tpegdec.tpegSaveDataPath, Tpegdec.tpegBackupDataPath, Tpegdec.giniEnvPath);
			Tpegdec.startTpeg();

			runningStatus = true;
		}
	}

	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		Log.i(TAG, "onBind");

		return mBinder;
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		super.onStartCommand(intent, flags, startId);

		Log.i(TAG, "onStartCommand");

		// 디코더 서비스가 가동중일때 OS가 서비스를 중지시킬 경우 다시 강제로 시작
		if (runningStatus)
			return Service.START_STICKY;
		// 사용자가 StopService를 누른 상태에서는 시작하지 않음
		else
			return Service.START_NOT_STICKY;
	}

	@Override
	public void onDestroy() {
		super.onDestroy();

		if (runningStatus == true) {
			Tpegdec.stopTpeg();
			Tpegdec.unInitTpeg();

			runningStatus = false;
		}

	}

	private final ITpegDecService.Stub mBinder = new ITpegDecService.Stub() {

		@Override
		public boolean getRunningStatus() throws RemoteException {
			// TODO Auto-generated method stub
			return TpegService.getRunningStatus();
		}

		@Override
		public void fillMSCData(byte[] pData) throws RemoteException {
			// TODO Auto-generated method stub
			Tpegdec.fillMSCData(pData);
		}

		@Override
		public void registerCallback(ITpegDecCallback cb)
				throws RemoteException {
			// TODO Auto-generated method stub
			Log.i(TAG, "registerCallback");
			if (cb != null) {
				mCallback = cb;
			}

		}

		@Override
		public void unregisterCallback(ITpegDecCallback cb)
				throws RemoteException {
			// TODO Auto-generated method stub
			Log.i(TAG, "unregisterCallback");
			if (cb != null) {
				mCallback = null;
			}

		}
		
		@Override
		public int sdiReset(int sequence) throws RemoteException {
			// TODO Auto-generated method stub
			return Tpegdec.sdiReset(sequence);
		}


	};
}
