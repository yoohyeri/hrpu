package com.mobilusauto.app.productionprocess;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import com.mobilusauto.app.productionprocess.R;

import android.app.Activity;
import android.bluetooth.BluetoothA2dp;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothProfile;
import android.bluetooth.BluetoothUuid;
import android.bluetooth.BluetoothProfile.ServiceListener;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.HMSIndex;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.media.*;
import android.media.AudioManager.OnAudioFocusChangeListener;
import android.media.MediaRecorder.*;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IHMSCommunicationService;
import android.os.IMTX;
import android.os.IYPService;
import android.os.Message;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.SystemProperties;
import android.os.UserHandle;
import android.provider.Settings;
import android.provider.Settings.SettingNotFoundException;
import android.util.Log;
import android.view.*;
import android.view.View.OnClickListener;
import android.widget.*;
import android.widget.RelativeLayout.LayoutParams;

public class LCDActivity extends Activity implements OnClickListener{
	private TextView mTitle;
	private Button mResultOK, mResultNG;
	private int mIndex;
	
	RelativeLayout mRL_Color;
	
	Handler mHandler = new Handler();
	final int ACTION_DELAY = 1500;
	final int DEFAULT = -1, UNKNOWN = -2;
	int mColorCount;
	
	
	final int[] mColor = {Color.parseColor("#FF0000"), Color.parseColor("#00FF00"), Color.parseColor("#0000FF"),
							Color.parseColor("#FFFFFF"), Color.parseColor("#c3c3c3")};
	View _view;
	
	
	Context mContext;
	Handler mHandlerBrightness = new Handler();
	int mBrightnessCount;
	int mBrightnessDefault;
	int BRIGHTNESS_COUNT_MIN = 0;
	int BRIGHTNESS_COUNT_MAX = 15;
	private IMTX mIHMS = IMTX.Stub.asInterface(ServiceManager.getService("motrex"));
	
	TextView mTV_Count;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_common);
		
		mContext = this;
		
		mIndex = getIntent().getIntExtra("_key", 0);
		String[] _str = getResources().getStringArray(R.array.arListTitle);
		
		_view = (View) findViewById(R.id.top);
		
		mTitle = (TextView) _view.findViewById(R.id.tv_title);
		mTitle.setText(_str[mIndex]);
		
		mResultOK = (Button) _view.findViewById(R.id.bt_result_ok);
		mResultOK.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_OK);
//				onBackPressed();
				finish();
			}
		});
		
		mResultNG = (Button) _view.findViewById(R.id.bt_result_ng);
		mResultNG.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				MainActivity.getInstace().mSetResult(mIndex, MD_DEFINE.RESULT_NG);
//				onBackPressed();
				finish();
			}
		});
		((TextView)_view.findViewById(R.id.tv_body)).setText(R.string.str_lcd_body);
		
		mColorCount = DEFAULT;
		mRL_Color = (RelativeLayout)findViewById(R.id.rl_color);
		mRL_Color.setVisibility(View.VISIBLE);
//		mRL_Color.setBackgroundColor(mColor[mColorCount]);
		mRL_Color.setOnClickListener(this);
//		mSetNaviShow(false);
		mTV_Count = (TextView) findViewById(R.id.tv_count);
	}
	
	@Override
	public void onBackPressed() {
		
		// TODO Auto-generated method stub
//		super.onBackPressed();
	}
	
	@Override
	protected void onResume() {
//		mHandler.postDelayed(mAction, ACTION_DELAY);
		// TODO Auto-generated method stub
		mHandlerBrightness.removeCallbacks(mRunnableBrightness);
		
		mResultOK.setEnabled(false);
		super.onResume();
	}
	@Override
	protected void onPause() {
		mSetNaviShow(true);
		super.onPause();
	};
	
	Runnable mAction = new Runnable() {
        @Override public void run() {
            //System.out.println("Performing action...");
        	if(mColorCount < mColor.length) {
        		mRL_Color.setBackgroundColor(mColor[mColorCount]);
        	} else if(mColorCount < mColor.length) {
        		mRL_Color.setBackground(getResources().getDrawable(R.drawable.color7));
        	} else {
        		mRL_Color.setVisibility(View.GONE);
        		mSetNaviShow(true);
        		return;
        	}
        	
        	mColorCount++;
        	mHandler.postDelayed(mAction, ACTION_DELAY);
        }
    };
	
	public void mSetNaviShow(boolean visible) {
		int flag = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
				| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
				| View.SYSTEM_UI_FLAG_LAYOUT_STABLE;
		if (!visible) {
			// We used the deprecated "STATUS_BAR_HIDDEN" for unbundling
			flag |= 
//					View.STATUS_BAR_HIDDEN | 
					View.SYSTEM_UI_FLAG_LAYOUT_STABLE
			        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
			        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
			        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
			        | View.SYSTEM_UI_FLAG_FULLSCREEN
			        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
		}
		
		mRL_Color.setSystemUiVisibility(flag);
	}

	@Override
	public void onClick(View arg0) {
		// TODO Auto-generated method stub
		if(arg0.getId() == R.id.rl_color) {
			if(mColorCount == UNKNOWN)	return;
			
        	mColorCount++;

        	if(mColorCount == 0) {
        		mBrightnessCount = 0;
        		mRL_Color.setBackgroundColor(mColor[mColorCount]);
        		mSetNaviShow(false);
        		_view.setVisibility(View.GONE);
        		mHandlerBrightness.removeCallbacks(mRunnableBrightness);
        	} else if(mColorCount < mColor.length) {
        		mRL_Color.setBackgroundColor(mColor[mColorCount]);
        	} else if(mColorCount == mColor.length) {
//        		mRL_Color.setBackground(getResources().getDrawable(R.drawable.black_1));
        		mRL_Color.setBackgroundColor(Color.parseColor("#000000"));
        	} else if(mColorCount == mColor.length + 1) {
        		mRL_Color.setBackground(getResources().getDrawable(R.drawable.color7));
        	} else if(mColorCount == mColor.length + 2) {
        		mRL_Color.setBackground(getResources().getDrawable(R.drawable.zebra));
        	} else if(mColorCount == mColor.length + 3) {
        		mRL_Color.setBackground(getResources().getDrawable(R.drawable.test_bg));
        	} else {
        		mColorCount = UNKNOWN;
        		mRL_Color.setBackgroundColor(Color.parseColor("#000000"));
        		
        		mRL_Color.setBackgroundColor(Color.WHITE);
        		
//        		mRL_Color.setVisibility(View.GONE);

//        		mSetNaviShow(true);
//        		_view.setVisibility(View.VISIBLE);
        		
        		mBrightnessCount = 0;
        		try {
        			mDefault = Settings.System.getIntForUser(mContext.getContentResolver(), 
					        Settings.System.SCREEN_BRIGHTNESS, 
					      UserHandle.USER_CURRENT);
				} catch (SettingNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		mStep = 0;
        		mHandlerBrightness.postDelayed(mRunnableBrightness, 1);
        		
        		mTV_Count.setVisibility(View.VISIBLE);
        		mTV_Count.setText(String.valueOf(mStep));
        		return;
        	}
		}
	}
	
	int mStep = 0;
	int mDefault = 100;
	private final int BRIGHT_CMD1 = 2;
	private final int BRIGHT_CMD2 = 2;
	private final int BRIGHT_MIN = 16;
	private final int BRIGHT_MAX = 30;
	private final int UP = 0, DOWN = 1;
	private int mDirection = UP;
	Runnable mRunnableBrightness = new Runnable() {
		public void run() {
	
//			byte _bright = (byte) (((BRIGHT_MAX - BRIGHT_MIN) / BRIGHTNESS_COUNT_MAX) * mBrightnessCount + BRIGHT_MIN);
			byte _bright = (byte) (mBrightnessCount + BRIGHT_MIN);
//			try {
//				mIHMS.sendDataMCU((byte)BRIGHT_CMD1, (byte)BRIGHT_CMD2, new byte[]{_bright});
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
				
//			if(mDirection == UP) 	mBrightnessCount += 1;
//			else					mBrightnessCount -= 1;
			
			if(mStep <= 15) {
				android.provider.Settings.System.putInt(mContext.getContentResolver(), 
						android.provider.Settings.System.SCREEN_BRIGHTNESS, mStep*15 + 15);
//						android.provider.Settings.System.SCREEN_BRIGHTNESS, 260 - mStep*20);
				mHandlerBrightness.postDelayed(mRunnableBrightness, 200);
				mTV_Count.setText(String.valueOf(mStep));
			} else if(mStep == 16) {
				mHandlerBrightness.postDelayed(mRunnableBrightness, 1000);
			} else {
				android.provider.Settings.System.putInt(mContext.getContentResolver(), 
						android.provider.Settings.System.SCREEN_BRIGHTNESS, mDefault);
				mResultOK.setEnabled(true);
				
        		mRL_Color.setVisibility(View.GONE);

        		mSetNaviShow(true);
        		_view.setVisibility(View.VISIBLE);
        		mTV_Count.setVisibility(View.INVISIBLE);
			}
			mStep ++;
//			
//			if(mBrightnessCount < BRIGHTNESS_COUNT_MAX && mDirection == UP) {
//				mHandlerBrightness.postDelayed(mRunnableBrightness, 200);
//			} else if(mBrightnessCount == BRIGHTNESS_COUNT_MAX) {
//				mDirection = DOWN;
//				mBrightnessCount -= 1;
//				mHandlerBrightness.postDelayed(mRunnableBrightness, 200);
//			} else if(mBrightnessCount >= 0 && mDirection == DOWN) {
//				mHandlerBrightness.postDelayed(mRunnableBrightness, 200);
//			} else  {
//				mResultOK.setEnabled(true);
//
//				mStep = 0;	
//			}
		}
	};
}
