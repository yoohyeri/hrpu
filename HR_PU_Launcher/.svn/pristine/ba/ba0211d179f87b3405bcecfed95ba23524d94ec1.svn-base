package com.mobilusauto.app.productionprocess;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.HMSIndex;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.media.AudioManager;
import android.media.AudioManager.OnAudioFocusChangeListener;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IHMSCommunicationService;
import android.os.IMTX;
import android.os.IMTXMCUCallback;
import android.os.IYPService;
import android.os.Message;
import android.os.PowerManager;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.SystemProperties;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.HeterogeneousExpandableList;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import android.os.IYPDVDReceiveCallback;
import android.provider.Settings;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.common.BitMatrix;

//
//import com.google.zxing.BarcodeFormat;
//import com.google.zxing.MultiFormatWriter;
//import com.google.zxing.common.BitMatrix;
import com.mobilusauto.app.productionprocess.R;
import com.mobilusauto.app.productionprocess.protocol.DVDForyouProtocol;
import com.mobilusauto.app.productionprocess.protocol.HMSUartProtocol;
import com.mobilusauto.app.productionprocess.sharedpreferences.MD_FINAL;
import com.mobilusauto.app.productionprocess.sharedpreferences.MSharedPreferences;

public class MainActivity extends Activity {
	public static final int LIST_INDEX_POWER			= 0;
	public static final int LIST_INDEX_TOUCH			= 1;	
	public static final int LIST_INDEX_LCD				= 2;
	public static final int LIST_INDEX_AUDIO			= 3;	
	public static final int LIST_INDEX_SD				= 4;
	public static final int LIST_INDEX_GPS				= 5;
	public static final int LIST_ONE_COUNT				= 6;
	
	public static final int LIST_INDEX_TPEG				= 6;
	public static final int LIST_INDEX_DMB				= 7;
	public static final int LIST_INDEX_REAR_CAMERA		= 8;
	public static final int LIST_INDEX_ILL				= 9;
	public static final int LIST_INDEX_SAVE_CAS			= 10;
	public static final int LIST_INDEX_SAVE_PC			= 11;
	public static final int LIST_MAX_COUNT				= 12;
	public static final int TOTAL_SAVE_DATA				= 12;
	
	//list common
	public static String[] mListTitle;
	//List 1
	private MListViewAdapter mSettingListAdapter = null;
	private ListView lvSettings = null;
	public static ArrayList<MD_Setting> mSettingList = new ArrayList<MD_Setting>();	
	//List 2
	private MListViewAdapter1 mSettingListAdapter1 = null;
	private ListView lvSettings1 = null;
	public static ArrayList<MD_Setting> mSettingList1 = new ArrayList<MD_Setting>();
	
	
	public static String mVersion;
	
	private static String[] mResult = new String [LIST_MAX_COUNT];
	
	MSharedPreferences mShare = null;
	MSharedPreferences mShareSerial = null;
	public final String HOME_KEY_SP_KEY = "hms.homekey.lock";
	
	//?���?
	private IMTX mIHMS = IMTX.Stub.asInterface(ServiceManager.getService("motrex"));
	
	private final String PROPERTIES_DVD_RUN = "hms.dvd.run";
	private static boolean mSubActivityRun = false;  
	
	
	public final String POWER_KEY_SKIP = "tcc.mtx.power.key.skip";
	public final String REAR_SKIP = "tcc.mtx.rear.skip";
	private BroadcastReceiver mReceiverUART;

	
	public static MainActivity 				mInstance;
	public static MainActivity  getInstace(){
        return mInstance;
    }
	
	private int mTestMode;
	private final int MODE_ALL = 0, MODE_RSE = 1, MODE_DVD = 2;
	public final int NEXT_INDEX_UNKNOWN = -1;
	private Button mTV_ALL, mTV_RSE, mTV_DVD, mTV_CLEAR, mTV_INIT;
	
	public List<Integer> mListALLView = new ArrayList<Integer>();
	public List<Integer> mListRSEView = new ArrayList<Integer>();
	public List<Integer> mListDVDView = new ArrayList<Integer>();
	
	
	private String mFWDN="";
	
	private AudioManager mAudioManager;
	private boolean mIsAudioGain = false;
	
	int mDefaultVolume, mDefaultBrightness;
	
	private int mNextIndex = NEXT_INDEX_UNKNOWN;
	
	//--------DVD
	public static final byte REQUEST_MCU_VERSION = (byte)0x00;
	public static final byte RESPONSE_MCU_VERSION = (byte)0x01;
	
	public static final byte TEST_MODE_KEY_NUMBER_POWER = (byte)0x01;
	public static final byte TEST_MODE_KEY_NUMBER_EJECT = (byte)0x02;
	public static final byte TEST_MODE_KEY_STATE_RELEASE = (byte)0x00;
	public static final byte TEST_MODE_KEY_STATE_PUSH = (byte)0x01;
	public static final byte TEST_MODE_STOP = (byte)0x00;
	public static final byte TEST_MODE_START = (byte)0x01;
	
	public final byte BYPASS = (byte)0xFF;
	public final byte DVD = (byte)0x06;
	public final byte DVD_APP_END = (byte)0x00;
	public final byte DVD_APP_START = (byte)0x01;
	public final byte IR_CMD_PLAY = (byte)0x14;
	
	//callback
	private OnDVDProtocal mListener;
	private String mKeyName=null;
	
	private IntentFilter filter = new IntentFilter();
	public final String ACTION_PRODUCTION_PROGRESS_RESULT = "android.hmsintent.action.PRODUCTION_PROGRESS_RESULT";
	public final String ACTION_RESULT = "result";
	private boolean mIsAlive = false;
	
	private static String FILTER_PC_TO_HRPU = "android.hmsintent.action.UART_PC_TO_HRPU";
	private static String FILTER_HRPU_TO_PC = "android.hmsintent.action.UART_HRPU_TO_PC";
	
	boolean mFirstSerialNumber = false;
	boolean mFirstCasID = false;
	String mSerialNumber = "";
	
	private String mResultOS = "";
	private String mResultFW = "";
	
	private boolean mDeleteCasId = DEBUG_.isFile("delete_cas.txt");
	private boolean mTestReportRet = false;
	private AlertDialog mDialogWait;
	
	private String mCurrentFileName = "";
	private String mBeforeFileName="";
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		mSubActivityRun = false;
	
		mKeyName = getIntent().getStringExtra("_key");
		if(mKeyName == null)	mKeyName = "";
		mShare = new MSharedPreferences(this, mKeyName);
		mShareSerial  = new MSharedPreferences(this, "Serial");
		setContentView(R.layout.activity_main);
		
		CreateListItem();

		mInstance = this;
		
		//list common
		mListTitle = getResources().getStringArray(R.array.arListTitle);
		//list 1
		lvSettings = (ListView) findViewById(R.id.list_view);
		mSettingListAdapter = new MListViewAdapter(this, R.layout.file_list_cell, mSettingList);
		lvSettings.setAdapter(mSettingListAdapter);
		//list 2
		lvSettings1 = (ListView) findViewById(R.id.list_view1);
		mSettingListAdapter1 = new MListViewAdapter1(this, R.layout.file_list_cell, mSettingList1);
		lvSettings1.setAdapter(mSettingListAdapter1);

		mLoadShared();
		
		mUpdateVersion();
				
		mAudioManager = (AudioManager)getSystemService(Context.AUDIO_SERVICE);

		//FWDN Number
		String _fwdn;
		_fwdn = SystemProperties.get("ro.serialno", "Error");
		if(_fwdn.equals("Error")) mFWDN = _fwdn;
		else {
			mFWDN = _fwdn.substring(0,  4) + _fwdn.substring(_fwdn.length() - 4, _fwdn.length());
		}
		
		// 생산공정 진입
//		try {
//			mIHMS.setMCUSync(false);
//		} catch (RemoteException e1) {
//			e1.printStackTrace();
//		}
		
//		mUpdateSerialNumber();
//		String _msg = getString(R.string.str_fwdn);
//		_msg = _msg.replace("%s", mFWDN);
//		((TextView) findViewById(R.id.tv_fwdn)).setText(_msg);
//		if(mFWDN.equals("Error"))	((TextView) findViewById(R.id.tv_fwdn)).setTextColor(_DEFINE.mRed);
//		else						((TextView) findViewById(R.id.tv_fwdn)).setTextColor(_DEFINE.mYellowGreen);
		
		//Res DVD Mode Button
		mTV_ALL = (Button) findViewById(R.id.bt_all);
		mTV_RSE = (Button) findViewById(R.id.bt_rse);
		mTV_DVD = (Button) findViewById(R.id.bt_dvd);
		mTV_CLEAR = (Button) findViewById(R.id.bt_clear);
		mTV_INIT = (Button) findViewById(R.id.bt_init);
		
		String _data = getIntent().getStringExtra("booting");
		if(_data != null && _data.equals("1")) {
			mTestMode = MODE_RSE;
			mTV_ALL.setEnabled(true);
			mTV_RSE.setEnabled(false);
			mTV_DVD.setEnabled(true);
		} else {
			mTestMode = MODE_ALL;
			mTV_ALL.setEnabled(false);
			mTV_RSE.setEnabled(true);
			mTV_DVD.setEnabled(true);
		}
		
		mTV_ALL.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
//				mTestMode = MODE_ALL;
//				mTV_ALL.setEnabled(false);
//				mTV_RSE.setEnabled(true);
//				mTV_DVD.setEnabled(true);
//				UpdateList();
					SystemProperties.set(POWER_KEY_SKIP, "false");
				  SystemProperties.set(REAR_SKIP, "false");
				  
				  Intent serviceIntent = new Intent();
				  serviceIntent.setAction("android.mtxintent.action.RESPONSE");
				  serviceIntent.putExtra("RESPONS", "OK");
				  sendBroadcast(serviceIntent);
				  
				  try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				 
				// 생산공정 프로그램 종료
				try {
					mIHMS.setRadioMute(false);
//					mIHMS.setSystemMute(false);
//					mIHMS.setMCUSync(true);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
				finish();
			}
		});
		mTV_RSE.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				mTestMode = MODE_RSE;
				mTV_ALL.setEnabled(true);
				mTV_RSE.setEnabled(false);
				mTV_DVD.setEnabled(true);
				mUpdateList();
			}
		});
		mTV_DVD.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				mTestMode = MODE_DVD;
				mTV_ALL.setEnabled(true);
				mTV_RSE.setEnabled(true);
				mTV_DVD.setEnabled(false);
				mUpdateList();
			}
		});
		mTV_CLEAR.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				AlertDialog.Builder builder = new AlertDialog.Builder(mInstance);     // ?��기서 this?�� Activity?�� this
				// ?��기서 �????��?�� ?��림창?�� ?��?�� ?��?��
				builder.setTitle("")        // ?���??? ?��?��
				.setMessage(getString(R.string.str_clear_msg))        // 메세�??? ?��?��
				.setCancelable(false)        // ?���??? 버튼 ?���????�� 취소 �????�� ?��?��
				.setPositiveButton(getString(R.string.str_clear_ok), new DialogInterface.OnClickListener(){       
					 // ?��?�� 버튼 ?���????�� ?��?��
					public void onClick(DialogInterface dialog, int whichButton){
						int _count = 0;
						for(int i=0; i<TOTAL_SAVE_DATA; i++) {
							if(mResult[i].equals(MD_FINAL.SHARE_DATA_DEFAULT) == false) {
								_count ++;
							}
						}
//						if(_count == 10) mSaveSharedExit(true);
//						else			mSaveSharedExit(false);
						
						mResultOS = "";
						mResultFW = "";
						for(int i=0; i<TOTAL_SAVE_DATA; i++)	mResult[i] = MD_FINAL.SHARE_DATA_DEFAULT;
						mSaveShared();
						dialog.cancel();
						mUpdateList();
						
						
						mUpdateVersion();
						if(mResultOS.length() <= 0) {
							mShowAlert(getResources().getString(R.string.str_ver_check), getResources().getString(R.string.str_ver_check_OS));
						} else if(mResultFW.length() <= 0) {
							mShowAlert(getResources().getString(R.string.str_ver_check), getResources().getString(R.string.str_ver_check_FW));
						}
					}
				})
				.setNegativeButton(getString(R.string.str_clear_no), new DialogInterface.OnClickListener(){      
				     // 취소 버튼 ?���????�� ?��?��
					public void onClick(DialogInterface dialog, int whichButton){
						dialog.cancel();
					}
				});
				AlertDialog dialog = builder.create();    // ?��림창 객체 ?��?��
				dialog.show();    // ?��림창 ?��?���???
			}
		});
		mTV_INIT.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				AlertDialog.Builder builder = new AlertDialog.Builder(mInstance);     // ?��기서 this?�� Activity?�� this
				builder.setTitle("")
				.setMessage(getString(R.string.str_msg_init))
				.setCancelable(false)
				.setPositiveButton(getString(R.string.str_clear_ok), new DialogInterface.OnClickListener(){       
					public void onClick(DialogInterface dialog, int whichButton){
//						mSendBroadcast("save", data);
						Intent serviceIntent = new Intent();
						serviceIntent.setAction("android.mtxintent.action.RESPONSE");
						serviceIntent.putExtra("INIT", "OK");
						sendBroadcast(serviceIntent);
						  
						mShowWaitMsg();
					}
				})
				.setNegativeButton(getString(R.string.str_clear_no), new DialogInterface.OnClickListener(){      
					public void onClick(DialogInterface dialog, int whichButton){
						dialog.cancel();
					}
				});
				AlertDialog dialog = builder.create();    // ?��림창 객체 ?��?��
				dialog.show();    // ?��림창 ?��?���???
			}
		});
		mTV_INIT.setEnabled(false);
		
		mNextIndex = NEXT_INDEX_UNKNOWN;
		
		filter.addAction(ACTION_PRODUCTION_PROGRESS_RESULT);
		this.registerReceiver(mReceiver, filter);
		
//		mTV_ALL.setEnabled(true);
		
		IntentFilter filter = new IntentFilter();
	    filter.addAction(FILTER_PC_TO_HRPU);
	    mReceiverUART = new OnLock_BroadcastReceiver();
	    registerReceiver(mReceiverUART, filter);
	    
	    try {
			mIHMS.setMCUListener(cServiceCallback);
			
			// 생산공정 진입
//			mIHMS.setSystemMute(true);
			mIHMS.setRadioMute(true);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    mLoadSharedSerial();
//	    if(mSerialNumber.length() <= 0 ) {
//			mFirstSerialNumber = true;
//			byte _buf[] = new byte[3];
//			_buf[0] = 3;
//			_buf[1] = 1;
//			try {
//				mIHMS.sendCommand((byte)0x01, (byte)0x0A, _buf);
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//	    } 
	    
	    if(mDeleteCasId) {
	    	try {
    			byte [] __data = new byte[6];
    			
    			__data[0] = 1;
    			__data[1] = (byte)0x00;
    			__data[2] = (byte)0x00;
    			__data[3] = (byte)0x00;
    			__data[4] = (byte)0x00;
    			__data[5] = (byte)0x00;
    			mStringCasID = "";
    			mDataCasID[0] = (byte)0x00;
    			mDataCasID[1] = (byte)0x00;
    			mDataCasID[2] = (byte)0x00;
    			mDataCasID[3] = (byte)0x00;
    			mDataCasID[4] = (byte)0x00;
    			
				mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_CAS, __data);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
	    } else {
		    if(mStringCasID.length() <= 0) {
		    	mFirstCasID = true;
		    	byte _buf[] = new byte[3];
				_buf[0] = 3;
				_buf[1] = 1;
				try {
					mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_CAS, _buf);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    }
	    }

	    
//	    try {
//			mIHMS.setAudioBalance(115, 115);
//		} catch (RemoteException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	    mTV_ALL.setEnabled(false);
	}
	
	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
	}
	
	
	private void mSetBarCode() {
//		MultiFormatWriter gen = new MultiFormatWriter();
//		String data = mSerialNumber;
//		Log.d("debug", "=>> data : " + data);
//		try {
//		    final int WIDTH = 250;
//		    final int HEIGHT = 40;
//		    BitMatrix bytemap = gen.encode(data, BarcodeFormat.CODE_128, WIDTH, HEIGHT);
//		    Bitmap bitmap = Bitmap.createBitmap(WIDTH, HEIGHT, Bitmap.Config.ARGB_8888);
//		    for (int i = 0 ; i < WIDTH ; ++i)
//		        for (int j = 0 ; j < HEIGHT ; ++j) {
//		            bitmap.setPixel(i, j, bytemap.get(i,j) ? Color.BLACK : Color.WHITE);
//		        }
//
//		    ImageView view = (ImageView) findViewById(R.id.tv_barcode);
//		    view.setImageBitmap(bitmap);
//		    view.invalidate();
////		    System.out.println("done!");
//		    Log.d("debug", "=>> write");
//
//		} catch (Exception e) {
//		    e.printStackTrace();
//		}
	}
	
	private void mUpdateList() {
		//리스트 초기화
		mSettingList.clear();		
		mSettingList1.clear();
		
		//테스트 결과 갯수 확인
		int _count = 0;
		for(int i=0; i<LIST_INDEX_SAVE_PC; i++) {
			if(mResult[i].equals(MD_FINAL.SHARE_DATA_DEFAULT) == false) {
				_count ++;
			}
		}
		
		MainActivity.getInstace().mSetResult(LIST_INDEX_TPEG, MD_DEFINE.RESULT_NA);
		for(int i = 0; i < mListTitle.length; i++) {
			MD_Setting _str = new MD_Setting();
			_str.number = String.valueOf(i+1);
			_str.title = mListTitle[i];
			
			if(i == LIST_INDEX_TPEG)
				_str.enable = false;
			else if(i == LIST_INDEX_SAVE_CAS && mStringCasID.length() > 0) {
				_str.enable = false;
				mResult[i] = MD_DEFINE.RESULT_OK;
			} else if(i == LIST_INDEX_SAVE_PC) {
				if(mResult[i].equals(MD_DEFINE.RESULT_OK) || _count != LIST_INDEX_SAVE_PC)
					_str.enable = false;
				else
					_str.enable = true;
			} else
				_str.enable = true;
			
			_str.result = mResult[i];

			if(i < LIST_ONE_COUNT)	mSettingList.add(_str);
			else					mSettingList1.add(_str);
			
		}
		mSettingListAdapter.notifyDataSetChanged();
		mSettingListAdapter1.notifyDataSetChanged();
		
		
		/*
		//List 2
		mSettingList1.clear();		
		for(int i = LIST_ONE_COUNT; i < mListTitle.length; i++) {
			MD_Setting _str = new MD_Setting();
			_str.number = String.valueOf(i+1);
			_str.title = mListTitle[i];
			_str.result = mResult[i];
			_str.enable = false;
			if(mTestMode == MODE_RSE)			{
				for(int ___index=0; ___index<mArrayModeRSE.length; ___index++) {
					if(mArrayModeRSE[___index] == i + 1)	{
						_str.enable = true;
						break;
					}
				}
			}
			else if(mTestMode == MODE_DVD)		{
				for(int ___index=0; ___index<mArrayModeDVD.length; ___index++) {
					if(mArrayModeDVD[___index] == i + 1)	{
						_str.enable = true;
						break;
					}
				}
			}
			else							{
				_str.enable = true;
			}

			mSettingList1.add(_str);
		}
		mSettingListAdapter1.notifyDataSetChanged();
		*/
	}
	
	@Override
	protected void onResume() {
		SystemProperties.set(POWER_KEY_SKIP, "true");
		SystemProperties.set(REAR_SKIP, "true");
		mIsAlive = true;
		Settings.System.putInt(this.getContentResolver(),
                Settings.System.SHOW_TOUCHES,  0);
		Settings.System.putInt(this.getContentResolver(),
                Settings.System.POINTER_LOCATION, 0);
//		if(mNextIndex == NEXT_INDEX_UNKNOWN) {
			if(mSubActivityRun == false) {
//				try {
//					mIHMS.setSubMCUListener(iYPDVDReceiveCallback);
//				} catch (RemoteException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
			}
			mSubActivityRun = false;
//			try {
//				mIHMS.setSystemProperty(PROPERTIES_DVD_RUN, "false");
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
			
			SystemProperties.set(HOME_KEY_SP_KEY, mBooleanToString(false));
			
			mUpdateList();
			
			if(!mIsAudioGain) {
				mAudioManager.requestAudioFocus(mOnAudioFocusChangeListener,
						AudioManager.STREAM_MUSIC, 
						AudioManager.AUDIOFOCUS_GAIN);
				mIsAudioGain = true;
				mSetServicePath(HMSIndex.MULTIMEDIA_PATH_CPU);
			}
		
		// TODO Auto-generated method stub
//		} else {
//			GoActivity(mNextIndex);
//		}
//		mUpdateSerialNumber();
		mHandlerUpdate.postDelayed(mRunnableUpdate, 1);
		
		if(mResultOS.length() <= 0) {
			mShowAlert(getResources().getString(R.string.str_ver_check), getResources().getString(R.string.str_ver_check_OS));
		} else if(mResultFW.length() <= 0) {
			mShowAlert(getResources().getString(R.string.str_ver_check), getResources().getString(R.string.str_ver_check_FW));
		}
		
		super.onResume();
	}
	
	private void mUpdateExit() {
		int _count = 0;
		for(int i=0; i<TOTAL_SAVE_DATA; i++) {
			if(mResult[i].equals(MD_FINAL.SHARE_DATA_DEFAULT) == false) {
				_count ++;
			}
		}
		if(_count == 12) {
			mTV_ALL.setEnabled(true);
			if(mStringCasID.length() > 0)	mTV_INIT.setEnabled(true);
		} else {
			mTV_ALL.setEnabled(false);
			mTV_INIT.setEnabled(false);
		}		
	}
	
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		mIsAlive = false;
		
		mIsAudioGain = false;
		mAudioManager.unregisterAudioFocusListener(mOnAudioFocusChangeListener);
		if(mSubActivityRun == false) {
//			try {
//				mIHMS.setSystemProperty(PROPERTIES_DVD_RUN, "true");
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			
//			try {
//				mIHMS.setSubMCUListener(null);
//			} catch (RemoteException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			this.unregisterReceiver(mReceiver);
//			finish();
		} else {
			SystemProperties.set(HOME_KEY_SP_KEY, mBooleanToString(true));
		}
		super.onPause();
	}
	public String mBooleanToString(boolean _is_on) {
		return ((_is_on) ? "true" : "false");
	}
	
	public void mSetResult(int _index, String _result) {
		mResult[_index] = _result;
		if(_result.equals(MD_DEFINE.RESULT_OK))	{
			mSetNextMode(_index);
		}
		else								{
			mSetNextMode(_index);
		}
	}
	
	//------------------GoActivity
	private void GoActivity(int index) {
		Intent intent = null;
		switch (index )
		{
			case LIST_INDEX_POWER:	mSubActivityRun = true; intent = new Intent(this, PowerKeyActivity.class);	break;
			case LIST_INDEX_TOUCH:		mSubActivityRun = true; intent = new Intent(this, TSPActivity.class);	break;
			case LIST_INDEX_LCD:		mSubActivityRun = true; intent = new Intent(this, LCDActivity.class);	break;
			case LIST_INDEX_AUDIO:		{
				//여기 RADIO 테스트 진입
				mSubActivityRun = true; intent = new Intent(this, RadioInputActivity.class);
				try {
//					mIHMS.setSystemMute(true);
					mIHMS.setRadioMute(false);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			break;
			case LIST_INDEX_SD:		mSubActivityRun = true; intent = new Intent(this, USBActivity.class);	break;
			case LIST_INDEX_GPS:		mSubActivityRun = true; intent = new Intent(this, GPSActivity.class);
			case LIST_INDEX_TPEG:			break;
			case LIST_INDEX_DMB:		{
				mSubActivityRun = true;
				
				Intent _intent;
				Intent _gIntent = getPackageManager().getLaunchIntentForPackage("com.telechips.android.tdmb");
				
				_intent = new Intent(Intent.ACTION_MAIN);
				
				_intent.addCategory(Intent.CATEGORY_LAUNCHER);
				ComponentName _componentName = new ComponentName(_gIntent.getPackage(), _gIntent.getComponent().getClassName());
				if(_componentName == null)
					return;
				
				//여기 DMB 진입
				try {
//					mIHMS.setSystemMute(true);
					mIHMS.setRadioMute(true);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				_intent.setComponent(_componentName);
				_intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
				_intent.putExtra("ProductionProcess", true);
//				startActivityForResult(_intent, 300);
				startActivity(_intent);
			}
			return;
			case LIST_INDEX_REAR_CAMERA:	{
				SystemProperties.set(REAR_SKIP, "false");
				mSubActivityRun = true; intent = new Intent(this, RearActivity.class);
			}
			break;
			case LIST_INDEX_ILL:			mSubActivityRun = true; intent = new Intent(this, ILLActivity.class);	break;
			case LIST_INDEX_SAVE_CAS:	
//					if(mSaveCasId())	mSetResult(LIST_INDEX_SAVE_CAS, MD_DEFINE.RESULT_OK);
//					else				mSetResult(LIST_INDEX_SAVE_CAS, MD_DEFINE.RESULT_NA);
//					mUpdateList();
				if(mSaveCasId()) {
					
				} else {
					mSetResult(LIST_INDEX_SAVE_CAS, MD_DEFINE.RESULT_NA);
					mUpdateList();
				}
				return;
			
			case LIST_INDEX_SAVE_PC:		{
				//3초 대기 타이머
				//Save 결과 Dialog
				AlertDialog.Builder builder = new AlertDialog.Builder(this);
				builder.setTitle(R.string.str_dlg_title)
						.setMessage(R.string.str_wait1)
						.setCancelable(false);
				mDialogWait = builder.create();
				mDialogWait.show();
				
				
				
				//저장할 파일 데이터 생성
				String []_key = new String[TOTAL_SAVE_DATA+2];
				String []_value = new String[TOTAL_SAVE_DATA+2];
				System.arraycopy(mListTitle, LIST_INDEX_POWER, _key, 2, TOTAL_SAVE_DATA);
				System.arraycopy(mResult, LIST_INDEX_POWER, _value, 2, TOTAL_SAVE_DATA);
				String os = SystemProperties.get("mtx.system.version.cpu", "");
				_key[0] = "CPU : " + os;
				_key[1] = "MCU : " + SystemProperties.get("mtx.system.version.mcu", "");
				_value[0] = mResultOS;
				_value[1] = mResultFW;
				_value[LIST_INDEX_SAVE_CAS + 2] = mStringCasID;
				
				// Get Save File Name
				if(DEBUG_.isFileFullPath(PATH_SD + "/" + PATH_TESTREPORT_FILENAME)) {
					mCurrentFileName = DEBUG_.mGetString(PATH_SD + "/" + PATH_TESTREPORT_FILENAME);
					if(mCurrentFileName.length() <= 2) mCurrentFileName="Unknown-0001";
				}else {
					MainActivity.getInstace().mSetResult(LIST_INDEX_SAVE_PC, MD_DEFINE.RESULT_NG);
					_value[LIST_INDEX_SAVE_PC + 2] = MD_DEFINE.RESULT_NG;
					
					mTestReportRet = false;
				}
				
				if(mCurrentFileName.length() > 0) {
					//Save Test Report File
					MainActivity.getInstace().mSetResult(LIST_INDEX_SAVE_PC, MD_DEFINE.RESULT_OK);
					_value[LIST_INDEX_SAVE_PC + 2] = MD_DEFINE.RESULT_OK;
					
					//기존 Shared파일이 있으면 해당 파일이 SD에 존재 하는지 확인 덮어쓰기
					//존재 하지 않으면 SD에서 가져온 파일명으로 저장
					if(mBeforeFileName.length() > 0) {
						if(DEBUG_.isFile("TestReport/" + mBeforeFileName + ".txt")) {
							mCurrentFileName = mBeforeFileName;
						} 
					}
					mTestReportRet = DEBUG_.createTestReport("TestReport", mCurrentFileName + ".txt", _key, _value);
					
					if(mTestReportRet == false) {
						MainActivity.getInstace().mSetResult(LIST_INDEX_SAVE_PC, MD_DEFINE.RESULT_NG);
						_value[LIST_INDEX_SAVE_PC + 2] = MD_DEFINE.RESULT_NG;
					} else {
						//Set Save Next File Name(SD CARD)
						if(mBeforeFileName.equals(mCurrentFileName) == false)	mSaveTestReportFileName(mCurrentFileName);
						
						mBeforeFileName = mCurrentFileName;
						
						//set Save Current File Name(Nand Shared)
						mSaveSharedSerial();
					}
					
					//PC프로그램에서 CSV파일로 저장한다. 타이틀 빼고 값만 전달한다.
					String data;				
					data = mSerialNumber + "," +
							mResult[LIST_INDEX_POWER] + "," +
							mResult[LIST_INDEX_TOUCH] + "," +
							mResult[LIST_INDEX_LCD] + "," +
							mResult[LIST_INDEX_AUDIO] + "," +
							mResult[LIST_INDEX_SD] + "," +
							mResult[LIST_INDEX_GPS] + "," +
							mResult[LIST_INDEX_DMB] + "," +
							mResult[LIST_INDEX_REAR_CAMERA] + "," +
							mResult[LIST_INDEX_SAVE_CAS] + "," +
							mResult[LIST_INDEX_SAVE_PC];
					mSendBroadcast("save", data);
				}
				
				//3초뒤 완료 팝업
				new Handler().postDelayed(new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						//Save 결과 Dialog
						mDialogWait.hide();
						
						AlertDialog.Builder builder = new AlertDialog.Builder(mInstance);
						builder.setTitle(R.string.str_dlg_title)
								.setMessage(mTestReportRet ? R.string.str_save_success : R.string.str_save_fail)        // 메세�??? ?��?��
								.setCancelable(false)
								.setPositiveButton(getString(R.string.str_clear_confirm), new DialogInterface.OnClickListener(){       
									public void onClick(DialogInterface dialog, int whichButton){
										dialog.cancel();
									}
								});
						AlertDialog dialog = builder.create();
						dialog.show();
						
						mUpdateList();
						mUpdateExit();
					}
				}, 3000);
			}
			return;
		}
		intent.putExtra("_key", index);
		startActivity(intent);
	}
	
	private String makeSerialNumber(int _count) {
		String os = SystemProperties.get("mtx.system.version.cpu", "");
		String name;
		long now = System.currentTimeMillis();
		Date date = new Date(now);
		String alphabet = getAlphabet("A", ((1900 + date.getYear()) - 2010));
		String month = getMonth(date.getMonth());
		
		if(os.contains("PU"))	name = "MS200APUKR" +  alphabet + month + String.format("%04d", _count);
		else					name = "MS200AHRKR" +  alphabet + month + String.format("%04d", _count);
		
		return name;		
	}
	
	private String getAlphabet(String source, int count) {
	    int length = source.length();
	    String lastChar = source;
	    for(int i=0; i< count; i++) {
	    	if(lastChar.equals("Z")) break;
	    	lastChar = lastChar.substring(0, length - 1) + String.valueOf((char) (lastChar.charAt(0) + 1));
	    }
	    return lastChar;
	}
	
	private String getMonth(int _month) {
		String month;
		if(_month + 1 == 10)		month = "A";
		else if(_month + 1 == 11)	month = "B";
		else if(_month + 1 == 12)	month = "C";
		else						month = Integer.toString((_month+1));
		return month;
	}
	
	private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
	    @Override
	    public void onReceive(Context context, Intent intent) {
	        String action = intent.getAction();
	        if(ACTION_PRODUCTION_PROGRESS_RESULT.equals(action)){
	        	mSetResult(LIST_INDEX_DMB, intent.getStringExtra(ACTION_RESULT));
	        	if(mIsAlive)	mUpdateList();
            }
	    }
	};
	
	
	private OnAudioFocusChangeListener mOnAudioFocusChangeListener = new OnAudioFocusChangeListener() {
		
		@Override
		public void onAudioFocusChange(int arg0) {
			// TODO Auto-generated method stub
			if(arg0 == AudioManager.AUDIOFOCUS_LOSS || arg0 == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT
					|| arg0 == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
				mIsAudioGain = false;
				mAudioManager.unregisterAudioFocusListener(mOnAudioFocusChangeListener);
				setResult(RESULT_OK);
			} else if(arg0 == AudioManager.AUDIOFOCUS_GAIN || arg0 == AudioManager.AUDIOFOCUS_GAIN_TRANSIENT ||
					arg0 == AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK) {
			}
		}
	};
	
	//-----------
	private void mLoadShared() {
		if(mShare != null) {
			mResult[LIST_INDEX_POWER] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA0, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_TOUCH] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA1, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_LCD] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA2, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_AUDIO] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA3, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_SD] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA4, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_GPS] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA5, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_TPEG] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA6, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_DMB] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA7, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_REAR_CAMERA] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA8, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_ILL] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA9, MD_FINAL.SHARE_DATA_DEFAULT);
			mResult[LIST_INDEX_SAVE_CAS] = "";
			mResult[LIST_INDEX_SAVE_PC] = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA11, MD_FINAL.SHARE_DATA_DEFAULT);
			
			mResultOS = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA12, MD_FINAL.SHARE_DATA_DEFAULT);
			mResultFW = mShare.mGetSharedDataString(MD_FINAL.SHARE_DATA13, MD_FINAL.SHARE_DATA_DEFAULT);
		}
	}
	private void mSaveShared() {
		if(mShare != null) {
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA0, mResult[LIST_INDEX_POWER]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA1, mResult[LIST_INDEX_TOUCH]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA2, mResult[LIST_INDEX_LCD]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA3, mResult[LIST_INDEX_AUDIO]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA4, mResult[LIST_INDEX_SD]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA5, mResult[LIST_INDEX_GPS]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA6, mResult[LIST_INDEX_TPEG]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA7, mResult[LIST_INDEX_DMB]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA8, mResult[LIST_INDEX_REAR_CAMERA]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA9, mResult[LIST_INDEX_ILL]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA10, mResult[LIST_INDEX_SAVE_CAS]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA11, mResult[LIST_INDEX_SAVE_PC]);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA12, mResultOS);
//			mShare.mSetSharedData(MD_FINAL.SHARE_DATA13, mResultFW);
		}
	}
	
	private void mLoadSharedSerial() {
		mSerialNumber = "";
		if(mShareSerial != null) {
			mSerialNumber = mShareSerial.mGetSharedDataString(MD_FINAL.SHARE_DATA0, "");
			mStringCasID = mShareSerial.mGetSharedDataString(MD_FINAL.SHARE_DATA1, "");
			mBeforeFileName = mShareSerial.mGetSharedDataString(MD_FINAL.SHARE_DATA2, "");
		}
		if(mSerialNumber.length() < 2) mSerialNumber = "";
	}
	private void mSaveSharedSerial() {
		if(mShareSerial != null) {
			mShareSerial.mSetSharedData(MD_FINAL.SHARE_DATA0, mSerialNumber);
			mShareSerial.mSetSharedData(MD_FINAL.SHARE_DATA1, mStringCasID);
			mShareSerial.mSetSharedData(MD_FINAL.SHARE_DATA2, mBeforeFileName);
		}
	}
	
	
	public void mSetNextMode(int index) {
		if(index == LIST_INDEX_DMB) {
			//여기 DMB 테스트 종료 생산 메인 화면으로 
			try {
//				mIHMS.setSystemMute(true);
				mIHMS.setRadioMute(true);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if(index == LIST_INDEX_AUDIO) {
			//여기 Radio Input 테스트 종료 생산 메인 화면으로
			try {
//				mIHMS.setSystemMute(true);
				mIHMS.setRadioMute(true);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		mNextIndex = NEXT_INDEX_UNKNOWN;
		if(index == NEXT_INDEX_UNKNOWN) return;
//		if(mTestMode == MODE_RSE)			{
//			for(int _index=0; _index<mListRSEView.size(); _index++) {
//				if(mListRSEView.get(_index).intValue() == index && _index < (mListRSEView.size()-1))	{
//					mNextIndex = mListRSEView.get(_index+1).intValue();
//					break;
//				}
//			}
//		} else if(mTestMode == MODE_DVD)	{
//			for(int _index=0; _index<mListDVDView.size(); _index++) {
//				if(mListDVDView.get(_index).intValue() == index && _index < (mListDVDView.size()-1))	{
//					mNextIndex = mListDVDView.get(_index+1).intValue();
//					break;
//				}
//			}
//		} else {
//			for(int _index=0; _index<mListALLView.size(); _index++) {
//				if(mListALLView.get(_index).intValue() == index && _index < (mListALLView.size()-1))	{
//					mNextIndex = mListALLView.get(_index+1).intValue();
//					break;
//				}
//			}
//		}
//		if(mNextIndex == LIST_INDEX_SAVE) mNextIndex = NEXT_INDEX_UNKNOWN;
	}
	
	private void mSetServicePath(int _id) 
	{
//		try {
//			mIHMS.setMultimediaPath(_id);
//		} catch (RemoteException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}
	
	//-------------------List 1
	private class MListViewAdapter extends MyListAdapter {
		public MListViewAdapter(Context context, int resource,
				List<MD_Setting> objects) {
			super(context, resource, objects);
		}

		@Override
		public void mClickEvent(int _id) {
			GoActivity(_id);
		}	
	}
	
	//-------------------List 2
	private class MListViewAdapter1 extends MyListAdapter {
		public MListViewAdapter1(Context context, int resource,
				List<MD_Setting> objects) {
			super(context, resource, objects);
		}

		@Override
		public void mClickEvent(int _id) {
			GoActivity(_id + LIST_ONE_COUNT);
		}
	}
	
	//--------------------DVD
	public void mGetDVDVersion() {
		//dvd mcu
		ArrayList<Byte> data = new ArrayList<Byte>();
		data.add(REQUEST_MCU_VERSION);		
		sendDVDPacket(HMSUartProtocol.Command.SYSTEM, HMSUartProtocol.Command.System.VERSION, data);
		
		//dvd deck
		sendDVDForyouPacket(DVDForyouProtocol.Request.GET_SOFTWARE_VERSION, null);
	}
	public void mSetTestMode(boolean start) {
		ArrayList<Byte> params = new ArrayList<Byte>();
		params.add((byte) (start ? TEST_MODE_START : TEST_MODE_STOP));
		
		sendDVDPacket(HMSUartProtocol.Command.TEST_MODE, HMSUartProtocol.Command.TestMode.MODE_CTRL, params);
	}
	public void mSetDVDStart(boolean start) {
		ArrayList<Byte> params = new ArrayList<Byte>();
		if (start)	params.add(DVD_APP_START);
		else		params.add(DVD_APP_END);
		sendDVDPacket(HMSUartProtocol.Command.DVD, HMSUartProtocol.Command.Dvd.APP_STATE, params);
		
		if(start) {
			ArrayList<Byte> param = new ArrayList<Byte>();
			param.add(IR_CMD_PLAY);
			sendDVDForyouPacket(DVDForyouProtocol.PlayCommands.IR, param);
		}
	}
//	private IHMSMCUCallback iYPDVDReceiveCallback = new IHMSMCUCallback.Stub() {
//
//		boolean bSOP = false;
//		boolean bLength = false;
//		int nLength = 0;
//		int nType = 0;
//		ArrayList<Byte> mPacket = new ArrayList<Byte>();
//
//		@Override
//		public void onReceive(byte[] recvData) throws RemoteException {
//			// TODO Auto-generated method stub
//
////			String strTemp = "";
////			for (int i = 0; i < recvData.length; i++) {
////				strTemp += String.format("%02X ", recvData[i]);
////			}
////			Log.d("debug", "==========> " + strTemp);
//////			if (recvData.length > 7 && recvData[8] == DVDForyouProtocol.Report.ERROR_STATUS)
////				Log.e(TAG, "DVD Report - " + strTemp);
//
//			for (int i = 0; i < recvData.length; i++) {
//				byte recv = recvData[i];
//				if (!bSOP) {
//					mPacket.clear();
//					if (recv == (byte) HMSUartProtocol.SOP) {
//						bSOP = true;
//						bLength = false;
//						nLength = nType = 0;
//						mPacket.add(recv);
//					}
//				} else if (nType == 0) {
//					switch (recv) {
//					case HMSUartProtocol.TYPE_NORMAL:
//						nType = recv;
//						mPacket.add(recv);
//						break;
//					default:
//						nType = nLength = 0;
//						bLength = bSOP = false;
//						break;
//					}
//				} else if (!bLength) {
//					bLength = true;
//					nLength = recv;
//					mPacket.add(recv);
//				} else {
//					mPacket.add(recv);
//					if (mPacket.size() - 4 >= nLength) {
//						bSOP = false;
//						if (mPacket.get(mPacket.size() - 1) == HMSUartProtocol.EOP) {
//							if (mPacket.get(nLength + 2) == (byte) HMSUartProtocol.MakeCRC(mPacket)) {
//								
////								String temp = "";
////								
////								// 로그 추가하여 테스트
////								for(int a = 0; a < mPacket.size(); a++)
////								{
////									temp += String.format("%02X ", mPacket.get(a));
////								}
////								Log.d("debug", "==========> " + temp);
//								switch (mPacket.get(1)) {
//								case HMSUartProtocol.TYPE_NORMAL:
//									final byte[] data = new byte[mPacket.get(2) - 3];
//									for (int index = 5; index < mPacket.size() - 2; index++)
//										data[index - 5] = mPacket.get(index);
//									
//									onHMSUartProtocolDecode(mPacket.get(3), mPacket.get(4), data);
//									break;
//								default:
//									break;
//								}
//							} else {
////								String temp = "";
////								// 로그 추가하여 테스트
////								for(int a = 0; a < mPacket.size(); a++)
////								{
////									temp += String.format("%02X ", mPacket.get(a));
////								}
////								Log.d("debug", "==========> " + temp);
//								Log.e("debug", "Packet Checksum Error");
//							}
//						} else {
////							String temp = "";
////							// 로그 추가하여 테스트
////							for(int a = 0; a < mPacket.size(); a++)
////							{
////								temp += String.format("%02X ", mPacket.get(a));
////							}
////							Log.d("debug", "==========> " + temp);
//							Log.e("debug", "Packet EOP Error");
//						}
//					}
//				}
//
//			}
//		}
//	};
	
	private void onHMSUartProtocolDecode(byte cmdH, byte cmdL, byte[] recvData) {
		switch (cmdH) {
		case HMSUartProtocol.Command.SYSTEM:	//DVD DECK FW Ver
			onSystemDecode(cmdH, cmdL, recvData);
			break;
		case HMSUartProtocol.Command.AUDIO:
//			onAudioDecode(cmdH, cmdL, recvData);
			break;
		case HMSUartProtocol.Command.DVD:
			onDVDRecvPacket(cmdH, cmdL, recvData);	//DVD DECK Ver
			break;
		case HMSUartProtocol.Command.TEST_MODE:
			onTestModeRecvPacket(cmdH, cmdL, recvData);
			break;
		}
	}
	
	private void onSystemDecode(byte cmdH, byte cmdL, byte[] recvData) {
		if(cmdL == HMSUartProtocol.Command.System.VERSION) {
			String version = new String(String.format("%s%d.%d.%d_180320",
		               SystemProperties.get("ro.product.fgcode", ""),
		                recvData[0], recvData[1], recvData[2]));

			if(mListener != null)	mListener.onDVDFWVer(version);
			
			ArrayList<Byte> data = new ArrayList<Byte>();
			data.add(RESPONSE_MCU_VERSION);
			sendDVDPacket(HMSUartProtocol.Command.SYSTEM, HMSUartProtocol.Command.System.VERSION, data);
		} else if(cmdL == HMSUartProtocol.Command.System.NEW_VERSION) {
			String version = new String(String.format("%s_%s",
		               SystemProperties.get("ro.product.fgcode", ""),
		               new String(recvData, 0, recvData.length)));
			
			if(mListener != null)	mListener.onDVDFWVer(version);
			
			ArrayList<Byte> data = new ArrayList<Byte>();
			data.add(RESPONSE_MCU_VERSION);
			sendDVDPacket(HMSUartProtocol.Command.SYSTEM, HMSUartProtocol.Command.System.VERSION, data);
		}
	}
	private void onDVDRecvPacket(byte cmdH, byte cmdL, byte[] recvData) {
		if(cmdL == HMSUartProtocol.Command.Dvd.BYPASS) {
			onDVDForyouParsing(recvData);
		}
	}
	private void onDVDForyouParsing(byte[] recvData) {

		boolean bSync = false;
		boolean bStartByte = false;
		boolean bLength = false;
		int length = 0;

		ArrayList<Byte> packet = new ArrayList<Byte>();

		for (int i = 0; i < recvData.length; i++) {
			if (!bSync) {
				if (recvData[i] == (byte) 0xFF) {
					bSync = true;
					bStartByte = bLength = false;
					length = 0;
					packet.clear();
					packet.add(recvData[i]);
				}
			} else if (!bStartByte) {
				if (recvData[i] == (byte) 0x55) {
					bStartByte = true;
					bLength = false;
					packet.add(recvData[i]);
				}
			} else if (!bLength) {
				length = recvData[i];
				bLength = true;
				packet.add(recvData[i]);
			} else {
				try {
					packet.add(recvData[i]);
					if (packet.size() >= (length + 4)) {
						if (packet.get(length + 3) == (byte) DVDForyouProtocol.makeCRC(packet)) {
							final byte[] data = new byte[packet.get(2)];
							for (int index = 4; index < packet.size() - 1; index++) {
								data[index - 4] = packet.get(index);
								onDVDForyouDecode(packet.get(2), packet.get(3), data);
							}
						} else {
							Log.d("debug", "Foryou Packet Checksum Error");
						}
						bSync = bStartByte = bLength = false;
						length = 0;
					}
				} catch (ArrayIndexOutOfBoundsException e) {
					// TODO: handle exception
					e.printStackTrace();
					Log.d("debug", "==========> onDVDForyouParsing " + e.toString());
					bSync = bStartByte = bLength = false;
					length = 0;
					packet.clear();
				}
			}
		}
	}
	private void onDVDForyouDecode(byte length, byte cmd, byte[] recvData) {
		if(cmd == DVDForyouProtocol.Report.SOFTWARE_VERSION) {
			int beLength = recvData[0];
			int feLength = recvData[1];
			int i, j;
			String beVersion = "";
			String feVersion = "";
			for (i = 0; i < beLength; i++) {
				if (recvData[i + 2] == 0)
					return;
			}
			for (j = 0; j < feLength; j++) {
				if (recvData[j + i + 2] == 0)
					return;
			}

			for (i = 0; i < beLength; i++)
				beVersion += String.format("%c", recvData[i + 2]);

			for (j = 0; j < feLength; j++)
				feVersion += String.format("%c", recvData[j + i + 2]);

//			SystemProperties.set("hms.dvd.deck.version", "BE: " + beVersion + " / FE: " + feVersion);
			if(mListener != null)	mListener.onDVDDeckVer("BE: " + beVersion + " / FE: " + feVersion);
		}
	}
	private void onTestModeRecvPacket(byte cmdH, byte cmdL, byte[] recvData) {
		if (cmdH != HMSUartProtocol.Command.TEST_MODE)
			return;

		switch (cmdL) {
		case HMSUartProtocol.Command.TestMode.MODE_CTRL:
			byte state = recvData[0];
			break;
			
		case HMSUartProtocol.Command.TestMode.TEST_KEY_STATE:
			String strKeyNum = "";
			String strKeyState = "";
			
			if(recvData[0] == TEST_MODE_KEY_NUMBER_POWER)
				strKeyNum = "power";
			else
				strKeyNum = "eject";
			
			if(recvData[1] == TEST_MODE_KEY_STATE_RELEASE)
				strKeyState = "release";
			else
				strKeyState = "push";
			
			if(mListener != null)	mListener.onDVDKeyState(strKeyNum, strKeyState);
			break;
		}
	}
	
	private void sendDVDPacket(byte cmdH, byte cmdL, ArrayList<Byte> data) {
		ArrayList<Byte> packet = new ArrayList<Byte>();

		packet.add(HMSUartProtocol.SOP);
		packet.add(HMSUartProtocol.TYPE_NORMAL);
		packet.add((byte) (data.size() + 3));
		packet.add((byte) cmdH);
		packet.add((byte) cmdL);
		for (int i = 0; i < data.size(); i++)
			packet.add((byte) data.get(i));
		packet.add((byte) HMSUartProtocol.MakeCRC(packet));
		packet.add((byte) HMSUartProtocol.EOP);

		final byte[] buff = new byte[packet.size()];
		for (int i = 0; i < packet.size(); i++) {
			buff[i] = packet.get(i);
		}
		
		String strTemp = "";
		for (int i = 0  ; i < buff.length; i++) {
			strTemp += String.format("%02X ", buff[i]);
		}

//		try {
//			mIHMS.sendSubMCU(buff);
//		} catch (RemoteException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}
	private void sendDVDForyouPacket(byte cmd, ArrayList<Byte> param) {

		ArrayList<Byte> packet = new ArrayList<Byte>();
		int length = 0;

		if (param != null)
			length = param.size() + 1;
		else
			length = 1;

		packet.add((byte) 0xFF);
		packet.add((byte) 0x55);
		packet.add((byte) length);
		packet.add(cmd);
		if (param != null) {
			for (int i = 0; i < param.size(); i++) {
				packet.add((byte) param.get(i));
			}
		}
		packet.add((byte) DVDForyouProtocol.makeCRC(packet));
		
		sendDVDPacket(HMSUartProtocol.Command.DVD, HMSUartProtocol.Command.Dvd.BYPASS, packet);
	}
	
	public void setDVDEventListener(OnDVDProtocal listener) { 
		mListener = listener; 
	}
	
	public String mGetName() {
		return mKeyName;
	}
	
	private void CreateListItem() {
		mListALLView.add(LIST_INDEX_POWER);
		mListALLView.add(LIST_INDEX_TOUCH);
		mListALLView.add(LIST_INDEX_LCD);
		mListALLView.add(LIST_INDEX_AUDIO);
		mListALLView.add(LIST_INDEX_SD);
		mListALLView.add(LIST_INDEX_GPS);
//		mListALLView.add(LIST_INDEX_TPEG);
		mListALLView.add(LIST_INDEX_DMB);
		mListALLView.add(LIST_INDEX_REAR_CAMERA);
		mListALLView.add(LIST_INDEX_ILL);
		mListALLView.add(LIST_INDEX_SAVE_CAS);
		mListALLView.add(LIST_INDEX_SAVE_PC);
	}
	
	void mSendBroadcast(String _key, String _value) {
	    Intent _intent = new Intent(FILTER_HRPU_TO_PC);
	    _intent.putExtra(_key, _value);
	    
	    sendBroadcast(_intent);
	}
	
	byte[] mDataSerial;
	byte mDataCasID[] = new byte[5];
	String mStringCasID="";
	public class OnLock_BroadcastReceiver extends BroadcastReceiver{
		 
	    @Override
	    public void onReceive(Context context, Intent intent) {
	        if(intent.getAction().equals(FILTER_PC_TO_HRPU))
	        {
	        	byte[] _serial = intent.getByteArrayExtra("serial");
	        	byte[] _cas_id = intent.getByteArrayExtra("CAS_ID");
	        	byte[] _get_serial = intent.getByteArrayExtra("GET_SERIAL");
	        	byte[] _get_cas_id = intent.getByteArrayExtra("GET_CAS_ID");
	        	
	        	
	        	
	        	if(_serial != null) {
	        		try {
	        			byte [] _data = new byte[_serial.length + 2];
        				mDataSerial = new byte[_serial.length];
	        			_data[0] = 1;
	        			_data[1] = (byte) _serial.length;
	        			System.arraycopy(_serial, 0, _data, 2, _serial.length);
        				System.arraycopy(_serial, 0, mDataSerial, 0, _serial.length);
        				DEBUG_.toHexString("[3] HRPU -> MCU Serial : ", _data);
						mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_SERIAL, _data);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
	        	} 
	        	if(_cas_id != null) {
	        		try {
//	        			Log.d("debug", "=>> [3] onReceive _cas_id : " + _cas_id);
	        			byte [] _data = new byte[_cas_id.length / 2 + 1];
	        			
	        			byte[] hex = hexStringToByteArray(new String(_cas_id));
//	        			Log.d("debug", "=>> hex Len : " + hex.length);
	        			
	        			
	        			_data[0] = 1;
	        			System.arraycopy(hex, 0, _data, 1, hex.length);
	        			System.arraycopy(hex, 0, mDataCasID, 0, hex.length);
	        			mStringCasID = new String(_cas_id);
	        			
	        			DEBUG_.toHexString("[3] HRPU -> MCU CAS : ", _data);
	        			
						mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_CAS, _data);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
	        	}
	        	if(_get_serial != null) {
	        		try {
	        			byte [] _data = new byte[3];
	        			_data[0] = 3;
	        			_data[1] = 1;
	        			_data[2] = 1;
	        			
        				DEBUG_.toHexString("[3] HRPU -> MCU Get Serial : ", _data);
						mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_SERIAL, _data);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
	        	} 
	        	if(_get_cas_id != null) {
	        		try {
	        			byte [] _data = new byte[2];
	        			_data[0] = 3;
	        			_data[1] = 1;
	        			
	        			
	        			DEBUG_.toHexString("[3] HRPU -> MCU Get CAS_ID : ", _data);
	        			
						mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_CAS, _data);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
	        	}
	        }
	    }
	}
	
	public static byte[] hexStringToByteArray(String s) {
	    int len = s.length();
	    byte[] data = new byte[len / 2];
	    for (int i = 0; i < len; i += 2) {
	        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
	                             + Character.digit(s.charAt(i+1), 16));
	    }
	    return data;
	}
	String byteArrayToHex(byte[] a) {
		StringBuilder sb = new StringBuilder();
	    for(final byte b: a)
	        sb.append(String.format("%02x", b&0xff));
	    return sb.toString();
	}
	
    private final byte PACKET_SOP                              = (byte)0xAA;
    private final byte PACKET_EOP                              = (byte)0x55;
    private final byte PACKET_TYPE_NORMAL                      = (byte)0x01;
	private IMTXMCUCallback cServiceCallback = new IMTXMCUCallback.Stub() {
		boolean bSOP = false;
		boolean bLength = false;
		boolean bLength2 = false;
		int nLength = 0;
		int nType = 0;
		ArrayList<Byte> mPacket = new ArrayList<Byte>();
		
		@Override
		public void onReceive(byte[] arg0) throws RemoteException {
			// TODO Auto-generated method stub
//			Log.d("debug", "=>[3] MCU -> APP onReceive");
			byte[] buf = arg0;
			
			DEBUG_.toHexString("[[3] [recv]", buf);
			for(int i=0; i<buf.length; i++) {
                if(bSOP == false) {
                    if(buf[i] == (byte)PACKET_SOP) {
                        bSOP = true;
                        bLength = false;
                        nType = nLength = 0;
                        mPacket.clear();
                        mPacket.add(buf[i]);
                    }
                } else if(nType == 0) {
                    switch(buf[i]) {
                        case PACKET_TYPE_NORMAL:
                            nType = buf[i];
                            mPacket.add(buf[i]);
                            break;
                        default:
                            nType = nLength = 0;
                            bLength = bSOP = false;
                            break;
                    }
                } else if(bLength == false) {
                    bLength = true;
                    nLength = buf[i];
                    mPacket.add(buf[i]);
                } else {
//                	Log.d("debug", "=>> mPacket.size() : " + mPacket.size() + "       nLength : " + nLength);
                    mPacket.add(buf[i]);
                    if(mPacket.size() - 4 >= nLength) {
//                    	Log.d("debug", "=>> mPacket.get(nLength+2) : " + mPacket.get(nLength+2) + "       (byte)MakeCRC(mPacket) : " + (byte)MakeCRC(mPacket));
                        if(mPacket.get(nLength+2) == (byte)MakeCRC(mPacket)) {
//                            if(DEBUG) Log.d(TAG, "Recv - Type: " + mPacket.get(1) + " Len: " + mPacket.get(2) + " CMD-H: " + mPacket.get(3) + " CMD-L: " + mPacket.get(4));
                            switch (mPacket.get(1)) {
                                case PACKET_TYPE_NORMAL:
                                    byte[] data = new byte[mPacket.get(2)-3];
                                    for(int index = 5; index < mPacket.size()-2; index++)
                                        data[index-5] = mPacket.get(index);
                                    
                                    onRecvPacket(mPacket.get(3), mPacket.get(4), data);
//                                    DEBUG_.toHexString("[pp]", data);
                                    break;
                                default:
                                    break;
                            }
                        }
                        else {
//                            if(DEBUG) {
//                                Log.d(TAG, "Packet Checksum Error");
//                                String str = "Recv : ";
//                                for(int k = 0; k < mPacket.size(); k++)
//                                    str += String.format("%02X " , (byte)mPacket.get(k));
//                                Log.d(TAG, str);
//                            }
                        }
                        bSOP = bLength = false;
                        nType = nLength = 0;
                    }
                }
			}
		}
	};
	
	private byte MakeCRC(ArrayList<Byte> buf) {
        int ret = 0;
        int sum = 0;
        if(buf.size() < 3)
            return -1;

        for(int i = 0; i < buf.get(2); i++)
            sum = (sum + (byte)buf.get(i+2)) & 0xFF;

        ret = ~(sum) & 0xFF;
        return (byte)ret;
    }
	
	private void onRecvPacket(byte cmd1, byte cmd2, byte []buf) { 
//		DEBUG_.toHexString(" MCU -> HRPU onRecvPacket buf : ", buf);
		if(cmd1 == HMSUartProtocol.CMD1_CAS_SERIAL) {
			if(cmd2 == HMSUartProtocol.CMD2_SERIAL) {
//				byte [] _buf = new byte[buf.length - 2];
//				System.arraycopy(buf, 2, _buf, 0, buf.length - 2);
//				
//				if(buf[0] == 0x02) {
//					if(Arrays.equals(mDataSerial, _buf)) {
//						mSerialNumber = new String(_buf);
//						mSendBroadcast("serial_result", "Serial( " + mSerialNumber + " ) Write : OK");
//						mHandlerUpdate.postDelayed(mRunnableUpdate, 1);
//					} else {
//						mSendBroadcast("serial_result", "Serial( " + mSerialNumber + " ) Write : FAIL");
//					}
//				} else if(buf[0] == 0x04) {
//					mSerialNumber = new String(_buf);
//					if(mSerialNumber.length() < 2) mSerialNumber = "";
//					Log.d("debug", "mSerialNumber : " + mSerialNumber);				
//				
//					if(mFirstSerialNumber == true) {
//						mFirstSerialNumber = false;
//						if(mSerialNumber.length() <= 0)	mSendFileNumberToSerial();
//					} else {
//						mSendBroadcast("GET_SERIAL", "Get Serial : " + mSerialNumber );
//					}
//					mHandlerUpdate.postDelayed(mRunnableUpdate, 1);
//				}
			} else if(cmd2 == HMSUartProtocol.CMD2_CAS) {
				byte [] _buf = new byte[buf.length - 1];
				System.arraycopy(buf, 1, _buf, 0, buf.length - 1);
				
				DEBUG_.toHexString("[3] MCU -> HRPU Serial _buf : ", _buf);
				DEBUG_.toHexString("[3] MCU -> HRPU Serial mDataSerial : ", mDataCasID);
				DEBUG_.toHexString("*******", _buf);
				if(buf[0] == 0x02) {	//save cas
					if(mDeleteCasId) {
						DEBUG_.DeleteFile("/data/eci.bin");	
						SystemProperties.set("persist.mtx.tdmb.cas", "");
						
						mHandlerUpdate.postDelayed(mRunnableUpdate, 1);
						mDeleteCasId = false;
					}
					else if(Arrays.equals(mDataCasID, _buf)) {

						mCasSaveSuccess = true;
						mSendBroadcast("cas_id_result", "CAS ID( " + mStringCasID + " ) Write : OK");
						DEBUG_.createCasFile(null, "/data/eci.bin", _buf);
						
						mHandlerUpdate.postDelayed(mRunnableUpdate, 1);
					} else {
						mSendBroadcast("cas_id_result", "CAS ID( " + mStringCasID + " ) Write : FAIL");
					}
					
				} else if(buf[0] == 0x04) {	//get sas
					if(mFirstCasID == true) {
						mFirstCasID = false;
						mStringCasID = byteArrayToHex(_buf).toUpperCase();
						if(mStringCasID.equals("0000000000")) {
							mStringCasID = "";
						} else {
							Log.d("debug", "=>> eci.bin 222");
							DEBUG_.createCasFile(null, "/data/eci.bin", _buf);
						}						
						mHandlerUpdate.postDelayed(mRunnableUpdate, 1);
					} else {
						mSendBroadcast("GET_CAS_ID", "Get CAS_ID : " + (byteArrayToHex(_buf)).toUpperCase());
					}
				}
			}
		}
	}
	
	Handler mHandlerUpdate = new Handler();
	Runnable mRunnableUpdate = new Runnable() {
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			//hide SaveCasIDPopup
			if(mCasSaveSuccess == true) {
				mCasSaveSuccess = false;
				mHideWaitMsgCasSave();
			}
			
			mSaveSharedSerial();
			if(mIsAlive == false) return;
			String _msg = getString(R.string.str_fwdn);
			_msg = _msg.replace("%s", mSerialNumber);
			((TextView) findViewById(R.id.tv_fwdn)).setText(_msg);
			if(mSerialNumber.length() <= 0)	((TextView) findViewById(R.id.tv_fwdn)).setTextColor(_DEFINE.mRed);
			else						((TextView) findViewById(R.id.tv_fwdn)).setTextColor(_DEFINE.mYellowGreen);
			
			if(mSerialNumber.length() > 2)	mSetBarCode();			
			
			if(mStringCasID.length() > 3) {
				SystemProperties.set("persist.mtx.tdmb.cas", mStringCasID.toUpperCase());
			}
			_msg = getString(R.string.str_casid);
			_msg = _msg.replace("%s", mStringCasID.toUpperCase());
			((TextView) findViewById(R.id.tvCasID)).setText(_msg);
			if(mStringCasID.length() <= 0)	((TextView) findViewById(R.id.tvCasID)).setTextColor(_DEFINE.mRed);
			else						((TextView) findViewById(R.id.tvCasID)).setTextColor(_DEFINE.mYellowGreen);
			mUpdateList();
		}
	};
	
	boolean mCasSaveSuccess = false;
	boolean mSaveCasId()  {
		boolean _ret = false;
		String _CasID = "";
		
		String mSDDir = "/storage/sdcard1/cas";
		String mSDFile = "/storage/sdcard1/cas/count.txt";
		File folder = new File(mSDDir);
		File file = new File(mSDFile);
		int count = DEBUG_.mGetNumber(file, -1);
		if(count != -1) {
			//get Cas id(File Name -> CAS ID)
			String _name = count + "_";
			File[] fileList = folder.listFiles();
			for(int i=0; i<fileList.length; i++) {
				if(fileList[i].getName().indexOf(_name) == 0) {
					_CasID = fileList[i].getName();
					
					_CasID = _CasID.replace(".txt", "");
					_CasID = _CasID.replace(_name, ""); 
					break;
				}
			}
			
			//send cas id(OS -> FW)
			if(_CasID.length() > 0) {
				try {
				byte [] _data = new byte[6];			
	    			byte[] hex = hexStringToByteArray(new String(_CasID));
	    			
	    			_data[0] = 1;
	    			System.arraycopy(hex, 0, _data, 1, hex.length);
	    			System.arraycopy(hex, 0, mDataCasID, 0, hex.length);
	    			mStringCasID = new String(_CasID);
	    			
	    			DEBUG_.toHexString("[3] HRPU -> MCU CAS : ", _data);
	    			
	    			mCasSaveSuccess = false;
					mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_CAS, _data);
					
					mShowWaitMsgCasSave();
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
				
				//Save Cas Count
				count = count +1;
				DEBUG_.mSaveNumber(file, count);
				_ret = true;
			}
		}
		return _ret;
	}
	
	private void mShowAlert(String _title, String _msg) {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle(_title)
				.setMessage(_msg)
				.setCancelable(false)
				.setPositiveButton(getString(R.string.str_ok), new DialogInterface.OnClickListener(){       
					public void onClick(DialogInterface dialog, int whichButton){
						dialog.cancel();
						if(mResultOS.length() <= 0) {
							mResultOS = getResources().getString(R.string.str_ok);
							mShowAlert(getResources().getString(R.string.str_ver_check), getResources().getString(R.string.str_ver_check_FW));
						} else {
							mResultFW = getResources().getString(R.string.str_ok);
						}			
						mUpdateVersion();
					}
				})
				.setNegativeButton(getString(R.string.str_ng), new DialogInterface.OnClickListener(){       
					public void onClick(DialogInterface dialog, int whichButton){
						dialog.cancel();
						if(mResultOS.length() <= 0) {
							mResultOS = getResources().getString(R.string.str_ng);
							mShowAlert(getResources().getString(R.string.str_ver_check), getResources().getString(R.string.str_ver_check_FW));
						} else {
							mResultFW = getResources().getString(R.string.str_ng);
						}	
						mUpdateVersion();
					}
				});
		AlertDialog dialog = builder.create();    // ?��림창 객체 ?��?��
//		dialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));
		dialog.show();    // ?��림창 ?��?���???
	}
	
	private void mUpdateVersion() {
		//version check
		mVersion = getString(R.string.str_version);
		String _os = SystemProperties.get("mtx.system.version.cpu", "");
		String _fw = SystemProperties.get("mtx.system.version.mcu", "");
		mVersion = mVersion.replace("%s", _os);
		mVersion = mVersion.replace("$b", mResultOS);
		mVersion = mVersion.replace("#s", _fw);
		mVersion = mVersion.replace("#b", mResultFW);
		((TextView) findViewById(R.id.tv_Version)).setText(mVersion);
		if(_fw.equals(""))	((TextView) findViewById(R.id.tv_Version)).setTextColor(_DEFINE.mRed);
		else				((TextView) findViewById(R.id.tv_Version)).setTextColor(_DEFINE.mYellowGreen);
	}
	
	private void mSendFileNumberToSerial()
	{
		// Get Save File Name
		String os = SystemProperties.get("mtx.system.version.cpu", "");
		String mSDFile = "/storage/sdcard1/TestReport/count.txt";
		File file = new File(mSDFile);
		int count = DEBUG_.mGetNumber(file, 1);
		if(count == -1 ) return; //SD UnMount
		
		String _name = makeSerialNumber(count);
		DEBUG_.mSaveNumber(file, count + 1);
		
		//SN 저장
		byte [] _serial = _name.getBytes();
//		byte [] _serial = new byte[1];
		if(_serial != null) {
    		try {
    			byte [] _data = new byte[_serial.length + 2];
				mDataSerial = new byte[_serial.length];
    			_data[0] = 1;
    			_data[1] = (byte) _serial.length;
    			System.arraycopy(_serial, 0, _data, 2, _serial.length);
				System.arraycopy(_serial, 0, mDataSerial, 0, _serial.length);

				mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_SERIAL, _data);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
    	} 
	}
	
	private String PATH_SD = "/storage/sdcard1/";
	private String PATH_TESTREPORT_FILENAME = "TestReportFileName.txt";
	private boolean mSaveTestReportFileName(String _name) {
		//-파싱
		String data;
        String[] words = _name.split("-");
        //마지막 데이터  +1
        int to = Integer.parseInt(words[words.length - 1]);
        to += 1;
        words[words.length - 1] = String.format("%04d", to);
        //최종 데이터 생성
        data = "";
        for(int i=0; i<words.length; i++) {
        	if(i != 0) data = data + "-";
        	data = data + words[i];
        }
		DEBUG_.mSaveFile(PATH_SD, PATH_TESTREPORT_FILENAME, data);
		return false;
	}
	//Init Button msg
	Handler mHandlerMsg = new Handler();
	Runnable mRunnableMsg = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			mDialogWait.hide();
		}
	};
	private void mShowWaitMsg() {
		mHandlerMsg.removeCallbacks(mRunnableMsg);
		mHandlerMsg.postDelayed(mRunnableMsg, 3000);
		
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle(R.string.str_initializing)
				.setMessage(R.string.str_wait1)
				.setCancelable(false);
		mDialogWait = builder.create();
		mDialogWait.show();
	}
	//Cas Save msg
	int mRetrycount = 0;
	Handler mHandlerMsgCasSave = new Handler();
	Runnable mRunnableMsgCasSave = new Runnable() {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			mRetrycount ++;
			
			if(mRetrycount == 4) {	//MCU CAS Write Fail
				mDialogWait.hide();
				mStringCasID = "";
				mSetResult(LIST_INDEX_SAVE_CAS, MD_DEFINE.RESULT_NG);
				mUpdateList();				
				
				//SD cas\count.ext count -1
				String mSDDir = "/storage/sdcard1/cas";
				String mSDFile = "/storage/sdcard1/cas/count.txt";
				File folder = new File(mSDDir);
				File file = new File(mSDFile);
				int count = DEBUG_.mGetNumber(file, -1);
				count = count - 1;
				DEBUG_.mSaveNumber(file, count);
			} else {
				try {
					byte [] _data = new byte[6];
	    			byte[] hex = hexStringToByteArray(mStringCasID);
	    			_data[0] = 1;
	    			System.arraycopy(hex, 0, _data, 1, hex.length);
	    			System.arraycopy(hex, 0, mDataCasID, 0, hex.length);
	    			DEBUG_.toHexString("[3] HRPU -> MCU CAS : ", _data);
					mIHMS.sendCommand(HMSUartProtocol.CMD1_CAS_SERIAL, HMSUartProtocol.CMD2_CAS, _data);

				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
				mHandlerMsgCasSave.postDelayed(mRunnableMsgCasSave, 1000);
			}
		}
	};
	private void mShowWaitMsgCasSave() {
		mRetrycount = 0;
		mHandlerMsgCasSave.removeCallbacks(mRunnableMsgCasSave);
		mHandlerMsgCasSave.postDelayed(mRunnableMsgCasSave, 1000);
		
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle(R.string.str_save_success)
				.setMessage(R.string.str_wait1)
				.setCancelable(false);
		mDialogWait = builder.create();
		mDialogWait.show();
	}
	private void mHideWaitMsgCasSave() {
		// TODO Auto-generated method stub
		mHandlerMsgCasSave.removeCallbacks(mRunnableMsgCasSave);
		mDialogWait.hide();
	}
}
